# bash

## 基礎

### ファンクションを定義する。

```bash
f() {
  true
}
```

## 応用

### ShellCheck をインストールする。

```bash
cd $HOME
curl -Lo - https://github.com/koalaman/shellcheck/releases/download/stable/shellcheck-stable.linux.x86_64.tar.xz | tar -Jxvf -
ln -s $HOME/shellcheck-stable/shellcheck ~/bin/shellcheck
```

### スクリプトの絶対パスを得る。

```bash
#!/bin/bash

SCRIPT_PATH=$(readlink -f "${BASH_SOURCE[${#BASH_SOURCE[@]} - 1]}")
echo "$SCRIPT_PATH"
```

```bash
$ ./a.sh
/tmp/a.sh
```

```bash
$ source a.sh
/tmp/a.sh
```

### 標準エラーに出力する。

```bash
err() {
  echo "$1" 1>&2
}
```

### 異常終了する。

```bash
die() {
  local msg="$1"; shift
  msg=" ${msg#"${msg%%[![:space:]]*}"}"

  local at=""
  local stack
  # shellcheck disable=SC2207
  if stack=($(caller 0)); then
    local line="${stack[0]}" file="${stack[2]}"
    at=" at ${file} line ${line}"
  fi
  err "Died${msg}${at}."
  exit 1
}
```

```bash
#!/bin/bash

err() {
  echo "$1" 1>&2
}

die() {
  local msg="$1"; shift
  msg=" ${msg#"${msg%%[![:space:]]*}"}"

  local at=""
  local stack
  # shellcheck disable=SC2207
  if stack=($(caller 0)); then
    local line="${stack[0]}" file="${stack[2]}"
    at=" at ${file} line ${line}"
  fi
  err "Died${msg}${at}."
  exit 1
}

die "abc"
```

```console
$ ./a.sh
Died abc at ./a.sh line 22.
```

### スタックトレースを出力する。

```bash
print_stacktrace() {
  local index=0
  local stack
  err "Traceback (most recent call first):"
  # shellcheck disable=SC2207
  while stack=($(caller "${index}")); do
    local line="${stack[0]}" sub="${stack[1]}" file="${stack[2]}"
    err "  ${file}, line ${line}, in ${sub}"
    ((index++))
  done
}
```

#### 例: インタラクティブなセッションでスタックトレースを出力する。

```bash
f() {
  print_stacktrace
}

g() {
  f
}

g
```

```console
$ g
main, line 2, in f
main, line 2, in g
```

#### 例: スクリプト実行でスタックトレースを出力する。

```bash
#!/bin/bash

err() {
  echo "$1" 1>&2
}

print_stacktrace() {
  local index=0
  local stack
  err "Traceback (most recent call first):"
  # shellcheck disable=SC2207
  while stack=($(caller "${index}")); do
    local line="${stack[0]}" sub="${stack[1]}" file="${stack[2]}"
    err "  ${file}, line ${line}, in ${sub}"
    ((index++))
  done
}

f() {
  print_stacktrace
}

g() {
  f
}

g
```

```console
$ ./a.sh
Traceback (most recent call first):
  ./a.sh, line 20, in f
  ./a.sh, line 24, in g
  ./a.sh, line 27, in main
```
