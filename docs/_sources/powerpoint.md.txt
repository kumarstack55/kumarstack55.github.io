# PowerPoint

PowerPoint を PowerShell で操作する。

## アプリケーションを得る。

```powershell
Add-Type -AssemblyName office
Add-Type -AssemblyName Microsoft.VisualBasic
Add-Type -AssemblyName System.Windows.Forms
Add-Type -AssemblyName Microsoft.Office.Interop.PowerPoint

$Application = New-Object -ComObject PowerPoint.Application
$msoTrue = [Microsoft.Office.Core.MsoTriState]::msoTrue
$Application.Visible = $msoTrue
```

## アプリケーションにプレゼンテーションを加える。

```powershell
$Presentations = $Application.Presentations
$Presentation = $Presentations.Add()
```

## プレゼンテーションを保存せず終了する。

```powershell
$Presentation.Saved = $true
$Presentation.Close()
```


## プレゼンテーションを保存する。

```powershell
$Desktop = [System.Environment+SpecialFolder]::Desktop
$FolderPath = [System.Environment]::GetFolderPath($Desktop)
$FullName = Join-Path $FolderPath "a.pptx"
$Presentation.SaveAs($FullName)
```

## プレゼンテーションにスライドを加える。

```powershell
$CustomLayoutName = 'タイトルとコンテンツ'
$Index = 1

$SlideMaster = $Presentation.SlideMaster
$CustomLayouts = $SlideMaster.CustomLayouts

$CustomLayouts |
    ForEach-Object { $_.Name }

$CustomLayout = $CustomLayouts |
    Where-Object { $_.Name -eq $CustomLayoutName } |
    Select-Object -First 1
if ($null -eq $CustomLayout) {
    throw
}

$Slides = $Presentation.Slides
$Slide = $Slides.AddSlide($Index, $CustomLayout)
```

## スライドを選択する。

```powershell
$Slide.Select()
```

## スライドのコンテンツのテキストを設定する。

コンテンツの正体は図形なので、図形のテキストを設定する。

```powershell
$Slide.Shapes |
    ForEach-Object { $_.Name }

$ShapeName = 'Content Placeholder 2'

$Shape = $Slide.Shapes |
    Where-Object { $_.Name -match $ShapeName } |
    Select-Object -First 1
if ($null -eq $Shape) {
    throw
}

$CrLf = "`r`n"

$Shape.TextFrame.TextRange.Text = "Paragraph1${CrLf}Paragraph2"
```

## 図形の段落のインデントを設定する。

```powershell
$ParagraphIndex = 2
$Paragraph = $Shape.TextFrame.TextRange.Paragraphs($ParagraphIndex)
$Paragraph.IndentLevel = 2
```

## 図形の箇条書きをなしにする。

```powershell
# 列挙型を使うために PowerShell のセッションに .NET クラスを定義する。
$SearchPath = 'C:\WINDOWS\assembly\GAC_MSIL'
$SearchFilter = 'Microsoft.Office.Interop.PowerPoint.dll'
$PathToAssemblyItems = Get-ChildItem -LiteralPath $SearchPath -Filter $SearchFilter -Recurse
if ($PathToAssemblyItems.Count -ne 1) {
    throw
}
$PathToAssembly = $PathToAssemblyItems[0].FullName
Add-Type -LiteralPath $PathToAssembly

# 箇条書きをなしにする。
$ppBulletNone = [Microsoft.Office.Interop.PowerPoint.PpBulletType]::ppBulletNone
$Shape.TextFrame.TextRange.ParagraphFormat.Bullet.Type = $ppBulletNone
```

## 図形のテキストボックスを自動調整なしにする。

```powershell
$ppAutoSizeNone = [Microsoft.Office.Interop.PowerPoint.PpAutoSize]::ppAutoSizeNone
$Shape.TextFrame.AutoSize = $ppAutoSizeNone
```

## 図形のテキストボックスの「図形内でテキストを折り返す」のチェックを外す。

```powershell
$msoFalse = [Microsoft.Office.Core.MsoTriState]::msoFalse
$Shape.TextFrame.WordWrap = $msoFalse
```

## 段落にフォントのサイズや下線を設定する。

```powershell
$msoTrue = [Microsoft.Office.Core.MsoTriState]::msoTrue

$ParagraphIndex = 2
$Paragraph = $Shape.TextFrame.TextRange.Paragraphs($ParagraphIndex)
$Paragraph.Font.Size = 32
$Paragraph.Font.Underline = $msoTrue
```

## スライドに図形を加える。

```powershell
$msoShapeRectangle = [Microsoft.Office.Core.MsoAutoShapeType]::msoShapeRectangle

$Left, $Top, $Width, $Height = 10, 20, 100, 200
$Shape2 = $Slide.Shapes.AddShape($msoShapeRectangle, $Left, $Top, $Width, $Height)
```

## 色

### スライドのタイトルのフォントの色

```console
PS > $Shape = $Slide.Shapes[1]
PS > $Shape.Name
Title 1
PS > $Shape.TextFrame.TextRange.Font.Color


Application      : Microsoft.Office.Interop.PowerPoint.ApplicationClass
Creator          : 1347899476
Parent           : System.__ComObject
RGB              : 0
Type             : 2
SchemeColor      : 2
TintAndShade     : 0
ObjectThemeColor : 13
Brightness       : 0
```

### 加えた図形の塗りつぶしの色

```console
PS > $Shape2.Line.ForeColor


Application      : Microsoft.Office.Interop.PowerPoint.ApplicationClass
Creator          : 1347899476
Parent           : System.__ComObject
RGB              : 9392687
Type             : 2
SchemeColor      : 5
TintAndShade     : -0.5
ObjectThemeColor : 5
Brightness       : 0
```

### 加えた図形の線の色

```console
PS > $Shape2.Fill.ForeColor


Application      : Microsoft.Office.Interop.PowerPoint.ApplicationClass
Creator          : 1347899476
Parent           : System.__ComObject
RGB              : 12874308
Type             : 2
SchemeColor      : 5
TintAndShade     : 0
ObjectThemeColor : 5
Brightness       : 0
```

### SchemeColor の一覧

```console
PS > $Enums |
>>     ForEach-Object {
>>         $d = [ordered]@{}
>>         $d.Add("Name", $_)
>>         $d.Add("Value", $_.value__)
>>         [pscustomobject]$d
>>     } |
>>     Sort-Object -Property Value

              Name Value
              ---- -----
ppSchemeColorMixed    -2
  ppNotSchemeColor     0
      ppBackground     1
      ppForeground     2
          ppShadow     3
           ppTitle     4
            ppFill     5
         ppAccent1     6
         ppAccent2     7
         ppAccent3     8
```

## 図形の位置を設定する。

```powershell
$Paragraph = $Shape.TextFrame.TextRange.Paragraphs(2)
$Left, $Top = $Paragraph.BoundLeft, $Paragraph.BoundTop
$Width, $Height = $Paragraph.BoundWidth, $Paragraph.BoundHeight

$Shape2.Left = $Left
$Shape2.Top = $Top
$Shape2.Width = $Width
$Shape2.Height = $Height
```

## 図形の枠線の色を設定する。

```powershell
Add-Type -AssemblyName Microsoft.VisualBasic

$rgb = [Microsoft.VisualBasic.Information]::RGB(0, 0, 0)
$Shape2.Line.ForeColor.RGB = $rgb
```

## 図形を塗りつぶしなしにする。

```powershell
$msoFalse = [Microsoft.Office.Core.MsoTriState]::msoFalse
$Shape2.Fill.Visible = $msoFalse
```

## スライドに線を加える。

```powershell
$BeginX, $BeginY = 100, 200
$EndX, $EndY = 300, 400
$Shape3 = $Slide.Shapes.AddLine($BeginX, $BeginY, $EndX, $EndY)
```

## 線の太さを設定する。

```powershell
$Shape3.Line.Weight = 3
$Shape3.Line.ForeColor.RGB = $rgb
```

## 図形を消す。

```powershell
$Shape3.Delete()
```

## フッターを表示する。

```powershell
$Slide.HeadersFooters.Footer.Visible = $true
```

## スライド番号を表示する。

```powershell
$Slide.HeadersFooters.SlideNumber.Visible = $true
```

## スライドのサイズを得る。

```powershell
$PageSetup = $Presentation.PageSetup
$PageSetup.SlideWidth  # pt
$PageSetup.SlideHeight  # pt
```

## グリッドを表示する。

```powershell
$msoTrue = [Microsoft.Office.Core.MsoTriState]::msoTrue
$Application.DisplayGridLines = $msoTrue
```

## 1グリッドのサイズを得る。

`$Presentation.GridDistance` は Pt 単位で、1グリッドの大きさを返す。

```powershell
$Presentation.GridDistance
```

次のコードは、スライド内のすべてのグリッドを通る格子を描きます。

```powershell
$Presentation.GridDistance = 5.669922
$Presentation.GridDistance *= 13

function DrawPoint {
    param($Left, $Top, $Text)

    $msoShapeOval = [Microsoft.Office.Core.MsoAutoShapeType]::msoShapeOval
    $ppAutoSizeNone = [Microsoft.Office.Interop.PowerPoint.PpAutoSize]::ppAutoSizeNone
    $msoFalse = [Microsoft.Office.Core.MsoTriState]::msoFalse

    $r = 20

    $s = $Slide.Shapes.AddShape($msoShapeOval, $Left - $r, $Top - $r, $r * 2, $r * 2)
    $s.TextFrame.AutoSize = $ppAutoSizeNone
    $s.TextFrame.WordWrap = $msoFalse
    $s.TextFrame.TextRange.Font.Size = 9
    $s.TextFrame.TextRange.Text = $Text

    $s
}

#
# グリッドに線を引く。
#

# スライド中央を起点にグリッド座標を計算する。
$PageSetup = $Presentation.PageSetup
$CenterXInPt = $PageSetup.SlideWidth / 2
$CenterYInPt = $PageSetup.SlideHeight / 2
DrawPoint -Left $CenterXInPt -Top $CenterYInPt -Text "Center" | Out-Null

# 浮動小数点の誤差を含めないよう整数で計算する。
$CenterToLeftInGrid = [int]($CenterXInPt / $Presentation.GridDistance) - 1
$CenterToTopInGrid = [int]($CenterYInPt / $Presentation.GridDistance) - 1
$WidthInGrid = $CenterToLeftInGrid * 2 + 1
$HeightInGrid = $CenterToTopInGrid * 2 + 1

$CenterToLeftInPt = $CenterToLeftInGrid * $Presentation.GridDistance
$CenterToTopInPt = $CenterToTopInGrid * $Presentation.GridDistance

$Left0 = $CenterXInPt - $CenterToLeftInPt
$Top0 = $CenterYInPt - $CenterToTopInPt
DrawPoint -Left $Left0 -Top $Top0 -Text "OriginInGrid" | Out-Null

$LeftToRight = ($WidthInGrid - 1) * $Presentation.GridDistance
$TopToBottom = ($HeightInGrid - 1) * $Presentation.GridDistance

$Right = $Left0 + $LeftToRight
$Bottom = $Top0 + $TopToBottom
DrawPoint -Left $Right -Top $Bottom -Text "RightBottom" | Out-Null

# 縦線を描く。
$LeftInGrid = 0
while ($LeftInGrid -lt $WidthInGrid) {
    $Left = $Left0 + $LeftInGrid * $Presentation.GridDistance
    $Slide.Shapes.AddLine($Left, $Top0, $Left, $Bottom) | Out-Null
    $LeftInGrid += 1
}

# 横線を描く。
$TopInGrid = 0
while ($TopInGrid -lt $HeightInGrid) {
    $Top = $Top0 + $TopInGrid * $Presentation.GridDistance
    $Slide.Shapes.AddLine($Left0, $Top, $Right, $Top) | Out-Null
    $TopInGrid += 1
}
```

## 表示 - マスター表示 - スライドマスターを表示する。

```powershell
$Application.CommandBars.ExecuteMso("ViewSlideMasterView")
```

## 表示 - プレゼンテーション - 標準を表示する。

```powershell
$Application.CommandBars.ExecuteMso("ViewSlideView")
```

## スライドマスター周辺のオブジェクト

PowerPoint のオブジェクトモデルと、アプリケーション上の表示には、用語の揺らぎがある。
特にスライドマスター周辺は揺らぎが多い。

### スライドマスター周辺のオブジェクトとオブジェクトの対応

オブジェクトの対応関係はおよそ以下の通り:

* 1 Application : N Presentations
    * 1 Presentation : N Slides
    * 1 Presentation : N Designs
        * 1 Design : 1 SlideMaster
            * 1 SlideMaster : 8 ColorScheme
        * 1 Design : 1 TitleMaster
        * 1 Design : N CustomLayouts
            * CustomLayouts のうちの1つが TitleMaster を含むことがある。

### スライドマスター周辺のオブジェクトと画面上の用語の対応

オブジェクトの用語と、画面上の用語は以下の通り:

* Application = PowerPoint
* Presentation = プレゼンテーション
* Design = スライドマスター
* SlideMaster = スライドマスター
* CustomLayout = カスタムレイアウト
* ColorScheme = テーマの色

上記に加えて、画面上のスライドマスターは、複数の Design を意味する場合がある。

## プレゼンテーションから Design を得る。

```powershell
$Presentation.Designs |
    ForEach-Object { $_.Name }

$Designs = $Presentation.Designs
$Design = $Designs[1]

# または、次のようにアクセスすることもできる。
# $Design = $Presentation.Designs(1)
```

## Design の名前を得る。

```powershell
$Design.Name
```

## Design の名前を変える。

```powershell
$Design.Name = "Office テーマ1"
```

## プレゼンテーションに Design を加える。

```powershell
$Designs = $Presentation.Designs
$DesignName = "Office テーマ2"
$Designs.Add($DesignName)
```

## Design から SlideMaster を得る。

```powershell
$SlideMaster = $Design.SlideMaster
```

## SlideMaster の背景色を設定する。

```powershell
$rgb = [Microsoft.VisualBasic.Information]::RGB(245, 245, 245)
$SlideMaster.Background.Fill.ForeColor.RGB = $rgb
```

## 色

以下はそれぞれ1:1で対応せず、並び順が異なる。

* a) `スライドマスター - 背景 - 配色 - 色のカスタマイズ` で表示される 12色
* b) `図形の書式設定 - 塗りつぶし - 色 - テーマの色` で表示される 10 色
* c) `スライドマスター - 背景 - 配色` で表示される 8 色
* d) `$SlideMaster.ColorScheme` で表示される 8 色

| a                        | b                        | c           | d                 |
| ------------------------ | ------------------------ | ----------- | ----------------- |
| テキスト/背景: 濃色1     | 左から2色目(テキスト1)   | 該当なし    | 上から1レコード目 |
| テキスト/背景: 淡色1     | 左から1色目(背景1)       | 該当なし    | 上から0レコード目 |
| テキスト/背景: 濃色2     | 左から4色目(テキスト2)   | 左から1色目 | 上から4レコード目 |
| テキスト/背景: 淡色2     | 左から3色目(背景2)       | 左から2色目 | 上から3レコード目 |
| アクセント1              | 左から5色目              | 左から3色目 | 上から5レコード目 |
| アクセント2              | 左から6色目              | 左から4色目 | 上から6レコード目 |
| アクセント3              | 左から7色目              | 左から5色目 | 該当なし          |
| アクセント4              | 左から8色目              | 左から6色目 | 該当なし          |
| アクセント5              | 左から9色目              | 左から7色目 | 該当なし          |
| アクセント6              | 左から10色目             | 左から8色目 | 該当なし          |
| ハイパーリンク           | 該当なし                 | 該当なし    | 上から7レコード目 |
| 表示済みのハイパーリンク | 該当なし                 | 該当なし    | 上から8レコード目 |

`PpColorSchemeIndex` で `ppFill` を使うと、 `アクセント1` の色が利用されるようだ。
`PpColorSchemeIndex` で `ppBackground` を使うと、 `テキスト/背景: 淡色1` の色が利用されるのではないか。
`PpColorSchemeIndex` で `ppForeground` を使うと、 `テキスト/背景: 濃色1` の色が利用されるのではないか。

挿入 - 図形 で、四角形を追加すると、
塗りつぶしの色が TintAndShade 0 で、アクセント1 が指定された。
線の色が TintAndShade -0.5 で、この値をゼロにすると アクセント1 と同じ RGB が指定された。

`図形の書式設定 - 塗りつぶし - 色 - テーマの色` で表示される 10 色と、その下の各5色は TintAndShade で生成された色のようだ。
最上段が TintAndShade が 0 のようだ。
その下から、5段がそれぞれ、
TintAndShade = 0.8,
TintAndShade = 0.6,
TintAndShade = 0.4,
TintAndShade = -0.25,
TintAndShade = -0.5
のようだ。

https://learn.microsoft.com/ja-jp/office/vba/api/powerpoint.ppcolorschemeindex

## SlideMaster の背景色を配色パターンから得る。

```powershell
# ppFill は、配色パターンの `アクセント1` の色を使うようだ。
$ppFill = [Microsoft.Office.Interop.PowerPoint.PpColorSchemeIndex]::ppFill
$SlideMaster.Background.Fill.ForeColor.SchemeColor = $ppFill
#$SlideMaster.Background.Fill.ForeColor.TintAndShade = 0
#$SlideMaster.Background.Fill.ForeColor.TintAndShade = 0.8
#$SlideMaster.Background.Fill.ForeColor.TintAndShade = 0.6
#$SlideMaster.Background.Fill.ForeColor.TintAndShade = 0.4
#$SlideMaster.Background.Fill.ForeColor.TintAndShade = -0.25
#$SlideMaster.Background.Fill.ForeColor.TintAndShade = -0.5

$SlideMaster.Background.Fill.ForeColor.TintAndShade = 0.95
```

## プレゼンテーションに配色パターンを追加する。

```powershell
$ColorScheme = $Slide.ColorScheme

$ppFill = [Microsoft.Office.Interop.PowerPoint.PpColorSchemeIndex]::ppFill
$Color = $ColorScheme.Colors($ppFill)
$Color.RGB = 100

$ColorScheme2 = $Presentation.ColorSchemes.Add($ColorScheme)
```

https://learn.microsoft.com/en-us/office/vba/api/powerpoint.colorscheme

<!--
## SlideMaster から ThemeColor を得る。

```powershell
$Theme = $SlideMaster.Theme
$ThemeColorScheme = $Theme.ThemeColorScheme

$ThemeColor = $ThemeColorScheme[[Microsoft.Office.Core.MsoThemeColorSchemeIndex]::msoThemeLight1]

# [Microsoft.Office.Core.MsoThemeColorSchemeIndex]::msoThemeDark1
# [Microsoft.Office.Core.MsoThemeColorSchemeIndex]::msoThemeLight1
# [Microsoft.Office.Core.MsoThemeColorSchemeIndex]::msoThemeDark2
# [Microsoft.Office.Core.MsoThemeColorSchemeIndex]::msoThemeLight2
# [Microsoft.Office.Core.MsoThemeColorSchemeIndex]::msoThemeAccent1
# [Microsoft.Office.Core.MsoThemeColorSchemeIndex]::msoThemeAccent2
# [Microsoft.Office.Core.MsoThemeColorSchemeIndex]::msoThemeAccent3
# [Microsoft.Office.Core.MsoThemeColorSchemeIndex]::msoThemeAccent4
# [Microsoft.Office.Core.MsoThemeColorSchemeIndex]::msoThemeAccent5
# [Microsoft.Office.Core.MsoThemeColorSchemeIndex]::msoThemeAccent6
# [Microsoft.Office.Core.MsoThemeColorSchemeIndex]::msoThemeHyperlink
# [Microsoft.Office.Core.MsoThemeColorSchemeIndex]::msoThemeFollowedHyperlink
```
-->

## SlideMaster の図形を得る。

```powershell
$SlideMaster.Shapes |
    ForEach-Object { $_.Name }

# タイトル
$ShapeName1 = "Title Placeholder 1"
$Shape1 = $SlideMaster.Shapes[$ShapeName1]
if ($null -eq $Shape1) { throw }

# コンテンツ
$ShapeName2 = "Text Placeholder 2"
$Shape2 = $SlideMaster.Shapes[$ShapeName2]
if ($null -eq $Shape2) { throw }

# 日付
$ShapeName3 = "Date Placeholder 3"
$Shape3 = $SlideMaster.Shapes[$ShapeName3]
if ($null -eq $Shape3) { throw }

# フッター
$ShapeName4 = "Footer Placeholder 4"
$Shape4 = $SlideMaster.Shapes[$ShapeName4]
if ($null -eq $Shape4) { throw }

# スライド番号
$ShapeName5 = "Slide Number Placeholder 5"
$Shape5 = $SlideMaster.Shapes[$ShapeName5]
if ($null -eq $Shape5) { throw }
```

## SlideMaster からレイアウトを消す。

```powershell
$CustomLayouts = $SlideMaster.CustomLayouts
$CustomLayouts |
    ForEach-Object { $_.Name }

$CustomLayoutNamesToDelete = [hashtable]@{}
$CustomLayouts |
    ForEach-Object {
        $CustomLayoutNamesToDelete.Add($_.Name, $true)
    }

# 残すレイアウト名
$CustomLayoutNamesToKeep = @(
    'タイトル スライド',
    'タイトルとコンテンツ'
    'タイトルのみ',
    '白紙'
)

$CustomLayoutNamesToKeep |
    ForEach-Object {
        $CustomLayoutNamesToDelete.Remove($_)
    }

$CustomLayoutsToDelete = $CustomLayouts |
    Where-Object {
        $CustomLayoutNamesToDelete.ContainsKey($_.Name)
    }

$CustomLayoutsToDelete |
    ForEach-Object {
        $_.Delete()
    }
```

## SlideMaster にレイアウトを加える。

```powershell
$CustomLayout = $CustomLayouts.Add(5)
```

## レイアウトのレイアウト名を設定する。

```powershell
$CustomLayout.Name = "layout name"
```

## レイアウトにプレースホルダーを加える。

```powershell
$ppPlaceholderObject = [Microsoft.Office.Interop.PowerPoint.PpPlaceholderType]::ppPlaceholderObject
$ppPlaceholderBody = [Microsoft.Office.Interop.PowerPoint.PpPlaceholderType]::ppPlaceholderBody

$Left, $Top, $Width, $Height = 100, 200, 300, 400

# コンテンツを加える。
$CustomLayout.Shapes.AddPlaceholder(
    $ppPlaceholderObject, $Left, $Top, $Width, $Height)

# テキストを加える。
$CustomLayout.Shapes.AddPlaceholder(
    $ppPlaceholderBody, $Left, $Top, $Width, $Height)
```
