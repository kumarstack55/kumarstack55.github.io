# bash応用

## ShellCheck をインストールする。

```bash
cd $HOME
curl -Lo - https://github.com/koalaman/shellcheck/releases/download/stable/shellcheck-stable.linux.x86_64.tar.xz | tar -Jxvf -
ln -s $HOME/shellcheck-stable/shellcheck ~/bin/shellcheck
```

## スクリプトの絶対パスを得る。

```bash
#!/bin/bash

SCRIPT_PATH=$(readlink -f "${BASH_SOURCE[0]}")
echo "$SCRIPT_PATH"
```

## 標準エラーに出力する。

```{eval-rst}
.. literalinclude:: snippets/bash/lib/err.sh
   :language: bash
   :caption:
```

```{eval-rst}
.. literalinclude:: snippets/bash/demo_err.sh
   :language: bash
   :caption:
```

```{eval-rst}
.. literalinclude:: snippets/bash/demo_err.txt
```

## ログを出力する。

```{eval-rst}
.. literalinclude:: snippets/bash/lib/log.sh
   :language: bash
   :caption:
```

```{eval-rst}
.. literalinclude:: snippets/bash/demo_log.sh
   :language: bash
   :caption:
```

```{eval-rst}
.. literalinclude:: snippets/bash/demo_log.txt
```

## 異常終了する。

```{eval-rst}
.. literalinclude:: snippets/bash/lib/die.sh
   :language: bash
   :caption:
```

```{eval-rst}
.. literalinclude:: snippets/bash/demo_die.sh
   :language: bash
   :caption:
```

```{eval-rst}
.. literalinclude:: snippets/bash/demo_die.txt
```

## コマンド実行が失敗したら異常終了する。

```{eval-rst}
.. literalinclude:: snippets/bash/lib/ensure.sh
   :language: bash
   :caption:
```

```{eval-rst}
.. literalinclude:: snippets/bash/demo_ensure.sh
   :language: bash
   :caption:
```

```{eval-rst}
.. literalinclude:: snippets/bash/demo_ensure.txt
```

## コマンド実行が失敗しても無視することを明示する。

```{eval-rst}
.. literalinclude:: snippets/bash/lib/ignore.sh
   :language: bash
   :caption:
```

```{eval-rst}
.. literalinclude:: snippets/bash/demo_ignore.sh
   :language: bash
   :caption:
```

```{eval-rst}
.. literalinclude:: snippets/bash/demo_ignore.txt
```

## 実行可能なコマンドがあるか確認する。

```{eval-rst}
.. literalinclude:: snippets/bash/lib/executable.sh
   :language: bash
   :caption:
```

```{eval-rst}
.. literalinclude:: snippets/bash/demo_executable.sh
   :language: bash
   :caption:
```

```{eval-rst}
.. literalinclude:: snippets/bash/demo_executable.txt
```

## チェックモードで実行する。

```{eval-rst}
.. literalinclude:: snippets/bash/lib/should_process.sh
   :language: bash
   :caption:
```

```{eval-rst}
.. literalinclude:: snippets/bash/demo_should_process.sh
   :language: bash
   :caption:
```

```{eval-rst}
.. literalinclude:: snippets/bash/demo_should_process.txt
```

## スタックトレースを出力する。

```{eval-rst}
.. literalinclude:: snippets/bash/lib/print_stacktrace.sh
   :language: bash
   :caption:
```

```{eval-rst}
.. literalinclude:: snippets/bash/demo_print_stacktrace.sh
   :language: bash
   :caption:
```

```{eval-rst}
.. literalinclude:: snippets/bash/demo_print_stacktrace.txt
```

## 左端の空白を除去する。

```bash
f() {
  local msg="$1"; shift
  echo "${msg#"${msg%%[![:space:]]*}"}"
}

f "  a b c"
f "a b c"
```

```console
$ f "  a b c"
a b c
```

```console
$ f "a b c"
a b c
```

## grep -H の出力を1行にまとめる。

```bash
#!/bin/bash
readonly marker="_NL_"

grep_h_output_to_block() {
  local prev_fname fname matched not_first
  while read -r line; do
    IFS=':' read -r fname matched < <(echo "$line")
    if [[ "$fname" != "$prev_fname" ]]; then
      [[ $not_first ]] && echo
      echo "$fname"
      prev_fname="$fname"
    fi
    echo "$matched"
    not_first=1
  done
  echo
}

block_to_oneline() {
  while read -r line; do echo -n "${line}${marker}"; done
  echo
}

oneline_to_lines() {
  while read -r line; do echo "${line//${marker}${marker}/$'\n'}"; done
}

add_separator_for_each_lines() {
  while read -r line; do echo "${line/${marker}/:}"; done
}

remove_marker() {
  while read -r line; do echo "${line//${marker}/}"; done
}

remove_empty_line() {
  while read -r line; do [[ $line ]] && echo "$line"; done
}

grep_one_line() {
  grep_h_output_to_block \
    | block_to_oneline \
    | oneline_to_lines \
    | add_separator_for_each_lines \
    | remove_marker \
    | remove_empty_line
}
```

```console
$ cat grep_one_line2.sh
...
$ source grep_one_line2.sh
$ cat grep-H.out
a.txt:10
b.txt:10
b.txt:11
c.txt:1 3
c.txt:14
$ cat grep-H.out | grep_one_line
a.txt:10
b.txt:1011
c.txt:1 314
```
