# Minikube

## Minikube 用のマシンを Windows + VirtualBox + Vagrant で用意する。

Ubuntu を選ぶ。

```text
Vagrant.configure("2") do |config|
  config.vm.box = "ubuntu/focal64"
  config.vm.synced_folder ".", "/vagrant", disabled: true
  #config.vm.network "forwarded_port", guest: 10080, host: 10080
  config.vm.provider "virtualbox" do |vb|
    vb.memory = "8192"
    vb.customize [ "modifyvm", :id, "--audio", "none" ]
    #vb.gui = true
    #vb.customize [ "modifyvm", :id, "--vram", "16" ]
  end
  config.ssh.forward_agent = true
end
```

```powershell
vagrant up
$env:SSH_AUTH_SOCK = '\\.\pipe\ssh-pageant'
vagrant ssh
```

```bash
# Ansibleをインストールする。
sudo apt update -y
sudo apt install ansible -y

# SSH公開鍵を登録する。
ssh-add -L \
  | while read -r line; do
      ansible \
        -m lineinfile \
        -a "path='${HOME}/.ssh/authorized_keys' line='${line}' backup=yes" \
        localhost
    done

# Docker をインストールする。
cd /tmp
curl -fsSL https://get.docker.com -o get-docker.sh
sudo sh get-docker.sh
cd

# Docker を非 root ユーザで管理する。
sudo groupadd docker
sudo usermod -aG docker $USER
newgrp docker

# kubectl をインストールする。
cd /tmp
curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
chmod +x kubectl
sudo mv ./kubectl /usr/local/bin/kubectl

# 編集できるようにする。
sudo apt install neovim -y
```

## Minikube を動かす。

```console
cd /tmp
curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube_latest_amd64.deb
sudo dpkg -i minikube_latest_amd64.deb

cd
minikube start
```

```console
vagrant@buster:/tmp$ docker container ls --format='{{json .}}' | jq .
{
  "Command": "\"/usr/local/bin/entr…\"",
  "CreatedAt": "2022-01-02 14:28:17 +0000 UTC",
  "ID": "0499c786bd2b",
  "Image": "gcr.io/k8s-minikube/kicbase:v0.0.28",
  "Labels": "created_by.minikube.sigs.k8s.io=true,mode.minikube.sigs.k8s.io=minikube,name.minikube.sigs.k8s.io=minikube,role.minikube.sigs.k8s.io=",
  "LocalVolumes": "1",
  "Mounts": "/lib/modules,minikube",
  "Names": "minikube",
  "Networks": "minikube",
  "Ports": "127.0.0.1:49157->22/tcp, 127.0.0.1:49156->2376/tcp, 127.0.0.1:49155->5000/tcp, 127.0.0.1:49154->8443/tcp, 127.0.0.1:49153->32443/tcp",
  "RunningFor": "22 hours ago",
  "Size": "2.93MB (virtual 1.08GB)",
  "State": "running",
  "Status": "Up 4 minutes"
}
```

## ダッシュボードを動かす。

```bash
minikube dashboard

# URLを表示する。ポートを10080/tcpにする。
minikube dashboard --url --port=10080
```

## Hello Minikube

https://kubernetes.io/docs/tutorials/hello-minikube/

```bash
# Create a Deployment
kubectl get all
kubectl get deployments
kubectl get pods

kubectl create deployment hello-node --image=k8s.gcr.io/echoserver:1.4

kubectl get all
kubectl get deployments
kubectl get pods

kubectl get deployments -o yaml | yq e . -
kubectl get pods -o yaml | yq e . -

kubectl get events

# Create a Service
kubectl config view

kubectl get services
kubectl get services -o yaml | yq e . -

kubectl expose deployment hello-node --type=LoadBalancer --port=8080

kubectl get services
kubectl get services -o yaml | yq e . -

minikube service hello-node

kubectl get services
kubectl get services -o yaml | yq e . -

# Enable addons
minikube addons list
minikube addons enable metrics-server
kubectl get pod,svc -n kube-system
minikube addons disable metrics-server

# Clean up
kubectl get services
kubectl delete service hello-node
kubectl get services

kubectl get all
kubectl get deployments
kubectl get pods

kubectl delete deployment hello-node

kubectl get all
kubectl get deployments
kubectl get pods

minikube stop
minikube delete
```

```console
vagrant@ubuntu-focal:~$ kubectl get all
NAME                 TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE
service/kubernetes   ClusterIP   10.96.0.1    <none>        443/TCP   21d
```

```console
vagrant@ubuntu-focal:~$ kubectl get deployments
No resources found in default namespace.
```

```console
vagrant@ubuntu-focal:~$ kubectl get pods
No resources found in default namespace.
```

```console
vagrant@ubuntu-focal:~$ kubectl create deployment hello-node --image=k8s.gcr.io/echoserver:1.4
deployment.apps/hello-node created
```

```console
vagrant@ubuntu-focal:~$ kubectl get all
NAME                              READY   STATUS    RESTARTS   AGE
pod/hello-node-7567d9fdc9-6p26s   1/1     Running   0          5s

NAME                 TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE
service/kubernetes   ClusterIP   10.96.0.1    <none>        443/TCP   21d

NAME                         READY   UP-TO-DATE   AVAILABLE   AGE
deployment.apps/hello-node   1/1     1            1           5s

NAME                                    DESIRED   CURRENT   READY   AGE
replicaset.apps/hello-node-7567d9fdc9   1         1         1       5s
```

```console
vagrant@ubuntu-focal:~$ kubectl get deployments
NAME         READY   UP-TO-DATE   AVAILABLE   AGE
hello-node   1/1     1            1           7s
```

```console
vagrant@ubuntu-focal:~$ kubectl get pods
NAME                          READY   STATUS    RESTARTS   AGE
hello-node-7567d9fdc9-6p26s   1/1     Running   0          13s
```

```console
vagrant@ubuntu-focal:~$ kubectl get deployments -o yaml | yq e . -
apiVersion: v1
items:
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      annotations:
        deployment.kubernetes.io/revision: "1"
      creationTimestamp: "2022-01-30T05:53:15Z"
      generation: 1
      labels:
        app: hello-node
      name: hello-node
      namespace: default
      resourceVersion: "28687"
      uid: 9323f9d2-0d34-4705-a854-116ac27be7f8
    spec:
      progressDeadlineSeconds: 600
      replicas: 1
      revisionHistoryLimit: 10
      selector:
        matchLabels:
          app: hello-node
      strategy:
        rollingUpdate:
          maxSurge: 25%
          maxUnavailable: 25%
        type: RollingUpdate
      template:
        metadata:
          creationTimestamp: null
          labels:
            app: hello-node
        spec:
          containers:
            - image: k8s.gcr.io/echoserver:1.4
              imagePullPolicy: IfNotPresent
              name: echoserver
              resources: {}
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext: {}
          terminationGracePeriodSeconds: 30
    status:
      availableReplicas: 1
      conditions:
        - lastTransitionTime: "2022-01-30T05:53:18Z"
          lastUpdateTime: "2022-01-30T05:53:18Z"
          message: Deployment has minimum availability.
          reason: MinimumReplicasAvailable
          status: "True"
          type: Available
        - lastTransitionTime: "2022-01-30T05:53:15Z"
          lastUpdateTime: "2022-01-30T05:53:18Z"
          message: ReplicaSet "hello-node-7567d9fdc9" has successfully progressed.
          reason: NewReplicaSetAvailable
          status: "True"
          type: Progressing
      observedGeneration: 1
      readyReplicas: 1
      replicas: 1
      updatedReplicas: 1
kind: List
metadata:
  resourceVersion: ""
  selfLink: ""
```

```console
vagrant@ubuntu-focal:~$ kubectl get pods -o yaml | yq e . -
apiVersion: v1
items:
  - apiVersion: v1
    kind: Pod
    metadata:
      creationTimestamp: "2022-01-30T05:53:15Z"
      generateName: hello-node-7567d9fdc9-
      labels:
        app: hello-node
        pod-template-hash: 7567d9fdc9
      name: hello-node-7567d9fdc9-6p26s
      namespace: default
      ownerReferences:
        - apiVersion: apps/v1
          blockOwnerDeletion: true
          controller: true
          kind: ReplicaSet
          name: hello-node-7567d9fdc9
          uid: 25cd08fa-03c0-4d24-a2ed-f42670ba921f
      resourceVersion: "28685"
      uid: 8c479aa6-93cd-4e34-a445-a39f69b42874
    spec:
      containers:
        - image: k8s.gcr.io/echoserver:1.4
          imagePullPolicy: IfNotPresent
          name: echoserver
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
              name: kube-api-access-brmtp
              readOnly: true
      dnsPolicy: ClusterFirst
      enableServiceLinks: true
      nodeName: minikube
      preemptionPolicy: PreemptLowerPriority
      priority: 0
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      serviceAccount: default
      serviceAccountName: default
      terminationGracePeriodSeconds: 30
      tolerations:
        - effect: NoExecute
          key: node.kubernetes.io/not-ready
          operator: Exists
          tolerationSeconds: 300
        - effect: NoExecute
          key: node.kubernetes.io/unreachable
          operator: Exists
          tolerationSeconds: 300
      volumes:
        - name: kube-api-access-brmtp
          projected:
            defaultMode: 420
            sources:
              - serviceAccountToken:
                  expirationSeconds: 3607
                  path: token
              - configMap:
                  items:
                    - key: ca.crt
                      path: ca.crt
                  name: kube-root-ca.crt
              - downwardAPI:
                  items:
                    - fieldRef:
                        apiVersion: v1
                        fieldPath: metadata.namespace
                      path: namespace
    status:
      conditions:
        - lastProbeTime: null
          lastTransitionTime: "2022-01-30T05:53:15Z"
          status: "True"
          type: Initialized
        - lastProbeTime: null
          lastTransitionTime: "2022-01-30T05:53:18Z"
          status: "True"
          type: Ready
        - lastProbeTime: null
          lastTransitionTime: "2022-01-30T05:53:18Z"
          status: "True"
          type: ContainersReady
        - lastProbeTime: null
          lastTransitionTime: "2022-01-30T05:53:15Z"
          status: "True"
          type: PodScheduled
      containerStatuses:
        - containerID: docker://84dd07fbe15810ba9e715698098ff5ac4af4f1046c2f23a8f5f85c3fba38460a
          image: k8s.gcr.io/echoserver:1.4
          imageID: docker-pullable://k8s.gcr.io/echoserver@sha256:5d99aa1120524c801bc8c1a7077e8f5ec122ba16b6dda1a5d3826057f67b9bcb
          lastState: {}
          name: echoserver
          ready: true
          restartCount: 0
          started: true
          state:
            running:
              startedAt: "2022-01-30T05:53:17Z"
      hostIP: 192.168.49.2
      phase: Running
      podIP: 172.17.0.2
      podIPs:
        - ip: 172.17.0.2
      qosClass: BestEffort
      startTime: "2022-01-30T05:53:15Z"
kind: List
metadata:
  resourceVersion: ""
  selfLink: ""
```

```console
vagrant@ubuntu-focal:~$ kubectl get events
LAST SEEN   TYPE     REASON              OBJECT                              MESSAGE
34m         Normal   Scheduled           pod/hello-nginx-795c489f95-l2nnz    Successfully assigned default/hello-nginx-795c489f95-l2nnz to minikube
34m         Normal   Pulling             pod/hello-nginx-795c489f95-l2nnz    Pulling image "nginx"
33m         Normal   Pulled              pod/hello-nginx-795c489f95-l2nnz    Successfully pulled image "nginx" in 48.557620475s
33m         Normal   Created             pod/hello-nginx-795c489f95-l2nnz    Created container nginx
33m         Normal   Started             pod/hello-nginx-795c489f95-l2nnz    Started container nginx
22m         Normal   Killing             pod/hello-nginx-795c489f95-l2nnz    Stopping container nginx
34m         Normal   SuccessfulCreate    replicaset/hello-nginx-795c489f95   Created pod: hello-nginx-795c489f95-l2nnz
34m         Normal   ScalingReplicaSet   deployment/hello-nginx              Scaled up replica set hello-nginx-795c489f95 to 1
52m         Normal   Scheduled           pod/hello-node-7567d9fdc9-4p6rb     Successfully assigned default/hello-node-7567d9fdc9-4p6rb to minikube
52m         Normal   Pulled              pod/hello-node-7567d9fdc9-4p6rb     Container image "k8s.gcr.io/echoserver:1.4" already present on machine
52m         Normal   Created             pod/hello-node-7567d9fdc9-4p6rb     Created container echoserver
52m         Normal   Started             pod/hello-node-7567d9fdc9-4p6rb     Started container echoserver
9m4s        Normal   Killing             pod/hello-node-7567d9fdc9-4p6rb     Stopping container echoserver
23s         Normal   Scheduled           pod/hello-node-7567d9fdc9-6p26s     Successfully assigned default/hello-node-7567d9fdc9-6p26s to minikube
21s         Normal   Pulled              pod/hello-node-7567d9fdc9-6p26s     Container image "k8s.gcr.io/echoserver:1.4" already present on machine
21s         Normal   Created             pod/hello-node-7567d9fdc9-6p26s     Created container echoserver
21s         Normal   Started             pod/hello-node-7567d9fdc9-6p26s     Started container echoserver
4m10s       Normal   Scheduled           pod/hello-node-7567d9fdc9-6xxwz     Successfully assigned default/hello-node-7567d9fdc9-6xxwz to minikube
4m8s        Normal   Pulled              pod/hello-node-7567d9fdc9-6xxwz     Container image "k8s.gcr.io/echoserver:1.4" already present on machine
4m8s        Normal   Created             pod/hello-node-7567d9fdc9-6xxwz     Created container echoserver
4m8s        Normal   Started             pod/hello-node-7567d9fdc9-6xxwz     Started container echoserver
72s         Normal   Killing             pod/hello-node-7567d9fdc9-6xxwz     Stopping container echoserver
5m3s        Normal   Scheduled           pod/hello-node-7567d9fdc9-q7gsb     Successfully assigned default/hello-node-7567d9fdc9-q7gsb to minikube
5m2s        Normal   Pulled              pod/hello-node-7567d9fdc9-q7gsb     Container image "k8s.gcr.io/echoserver:1.4" already present on machine
5m2s        Normal   Created             pod/hello-node-7567d9fdc9-q7gsb     Created container echoserver
5m          Normal   Started             pod/hello-node-7567d9fdc9-q7gsb     Started container echoserver
4m33s       Normal   Killing             pod/hello-node-7567d9fdc9-q7gsb     Stopping container echoserver
52m         Normal   SuccessfulCreate    replicaset/hello-node-7567d9fdc9    Created pod: hello-node-7567d9fdc9-4p6rb
5m3s        Normal   SuccessfulCreate    replicaset/hello-node-7567d9fdc9    Created pod: hello-node-7567d9fdc9-q7gsb
4m10s       Normal   SuccessfulCreate    replicaset/hello-node-7567d9fdc9    Created pod: hello-node-7567d9fdc9-6xxwz
23s         Normal   SuccessfulCreate    replicaset/hello-node-7567d9fdc9    Created pod: hello-node-7567d9fdc9-6p26s
52m         Normal   ScalingReplicaSet   deployment/hello-node               Scaled up replica set hello-node-7567d9fdc9 to 1
5m3s        Normal   ScalingReplicaSet   deployment/hello-node               Scaled up replica set hello-node-7567d9fdc9 to 1
4m10s       Normal   ScalingReplicaSet   deployment/hello-node               Scaled up replica set hello-node-7567d9fdc9 to 1
23s         Normal   ScalingReplicaSet   deployment/hello-node               Scaled up replica set hello-node-7567d9fdc9 to 1
```

```console
vagrant@ubuntu-focal:~$ kubectl config view
apiVersion: v1
clusters:
- cluster:
    certificate-authority: /home/vagrant/.minikube/ca.crt
    extensions:
    - extension:
        last-update: Sun, 30 Jan 2022 04:25:02 UTC
        provider: minikube.sigs.k8s.io
        version: v1.24.0
      name: cluster_info
    server: https://192.168.49.2:8443
  name: minikube
contexts:
- context:
    cluster: minikube
    extensions:
    - extension:
        last-update: Sun, 30 Jan 2022 04:25:02 UTC
        provider: minikube.sigs.k8s.io
        version: v1.24.0
      name: context_info
    namespace: default
    user: minikube
  name: minikube
current-context: minikube
kind: Config
preferences: {}
users:
- name: minikube
  user:
    client-certificate: /home/vagrant/.minikube/profiles/minikube/client.crt
    client-key: /home/vagrant/.minikube/profiles/minikube/client.key
```

```console
vagrant@ubuntu-focal:~$ kubectl get services
NAME         TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE
kubernetes   ClusterIP   10.96.0.1    <none>        443/TCP   21d
```

```console
vagrant@ubuntu-focal:~$ kubectl get services -o yaml | yq e . -
apiVersion: v1
items:
  - apiVersion: v1
    kind: Service
    metadata:
      creationTimestamp: "2022-01-09T01:16:03Z"
      labels:
        component: apiserver
        provider: kubernetes
      name: kubernetes
      namespace: default
      resourceVersion: "206"
      uid: e82990e3-0c17-4ff3-96d0-3a69da6a957e
    spec:
      clusterIP: 10.96.0.1
      clusterIPs:
        - 10.96.0.1
      internalTrafficPolicy: Cluster
      ipFamilies:
        - IPv4
      ipFamilyPolicy: SingleStack
      ports:
        - name: https
          port: 443
          protocol: TCP
          targetPort: 8443
      sessionAffinity: None
      type: ClusterIP
    status:
      loadBalancer: {}
kind: List
metadata:
  resourceVersion: ""
  selfLink: ""
```

```console
vagrant@ubuntu-focal:~$ kubectl expose deployment hello-node --type=LoadBalancer --port=8080
service/hello-node exposed
```

```console
vagrant@ubuntu-focal:~$ kubectl get services
NAME         TYPE           CLUSTER-IP     EXTERNAL-IP   PORT(S)          AGE
hello-node   LoadBalancer   10.109.209.3   <pending>     8080:31550/TCP   4s
kubernetes   ClusterIP      10.96.0.1      <none>        443/TCP          21d
```

```console
vagrant@ubuntu-focal:~$ kubectl get services -o yaml | yq e . -
apiVersion: v1
items:
  - apiVersion: v1
    kind: Service
    metadata:
      creationTimestamp: "2022-01-30T05:53:51Z"
      labels:
        app: hello-node
      name: hello-node
      namespace: default
      resourceVersion: "28710"
      uid: 6ea5caba-9b15-46f2-8b4a-3e1e1ad4c55a
    spec:
      allocateLoadBalancerNodePorts: true
      clusterIP: 10.109.209.3
      clusterIPs:
        - 10.109.209.3
      externalTrafficPolicy: Cluster
      internalTrafficPolicy: Cluster
      ipFamilies:
        - IPv4
      ipFamilyPolicy: SingleStack
      ports:
        - nodePort: 31550
          port: 8080
          protocol: TCP
          targetPort: 8080
      selector:
        app: hello-node
      sessionAffinity: None
      type: LoadBalancer
    status:
      loadBalancer: {}
  - apiVersion: v1
    kind: Service
    metadata:
      creationTimestamp: "2022-01-09T01:16:03Z"
      labels:
        component: apiserver
        provider: kubernetes
      name: kubernetes
      namespace: default
      resourceVersion: "206"
      uid: e82990e3-0c17-4ff3-96d0-3a69da6a957e
    spec:
      clusterIP: 10.96.0.1
      clusterIPs:
        - 10.96.0.1
      internalTrafficPolicy: Cluster
      ipFamilies:
        - IPv4
      ipFamilyPolicy: SingleStack
      ports:
        - name: https
          port: 443
          protocol: TCP
          targetPort: 8443
      sessionAffinity: None
      type: ClusterIP
    status:
      loadBalancer: {}
kind: List
metadata:
  resourceVersion: ""
  selfLink: ""
```

```console
vagrant@ubuntu-focal:~$ minikube service hello-node
|-----------|------------|-------------|---------------------------|
| NAMESPACE |    NAME    | TARGET PORT |            URL            |
|-----------|------------|-------------|---------------------------|
| default   | hello-node |        8080 | http://192.168.49.2:31550 |
|-----------|------------|-------------|---------------------------|
🎉  Opening service default/hello-node in default browser...
👉  http://192.168.49.2:31550
```

```console
vagrant@ubuntu-focal:~$ kubectl get services
NAME         TYPE           CLUSTER-IP     EXTERNAL-IP   PORT(S)          AGE
hello-node   LoadBalancer   10.109.209.3   <pending>     8080:31550/TCP   17s
kubernetes   ClusterIP      10.96.0.1      <none>        443/TCP          21d
```

```console
vagrant@ubuntu-focal:~$ kubectl get services -o yaml | yq e . -
apiVersion: v1
items:
  - apiVersion: v1
    kind: Service
    metadata:
      creationTimestamp: "2022-01-30T05:53:51Z"
      labels:
        app: hello-node
      name: hello-node
      namespace: default
      resourceVersion: "28710"
      uid: 6ea5caba-9b15-46f2-8b4a-3e1e1ad4c55a
    spec:
      allocateLoadBalancerNodePorts: true
      clusterIP: 10.109.209.3
      clusterIPs:
        - 10.109.209.3
      externalTrafficPolicy: Cluster
      internalTrafficPolicy: Cluster
      ipFamilies:
        - IPv4
      ipFamilyPolicy: SingleStack
      ports:
        - nodePort: 31550
          port: 8080
          protocol: TCP
          targetPort: 8080
      selector:
        app: hello-node
      sessionAffinity: None
      type: LoadBalancer
    status:
      loadBalancer: {}
  - apiVersion: v1
    kind: Service
    metadata:
      creationTimestamp: "2022-01-09T01:16:03Z"
      labels:
        component: apiserver
        provider: kubernetes
      name: kubernetes
      namespace: default
      resourceVersion: "206"
      uid: e82990e3-0c17-4ff3-96d0-3a69da6a957e
    spec:
      clusterIP: 10.96.0.1
      clusterIPs:
        - 10.96.0.1
      internalTrafficPolicy: Cluster
      ipFamilies:
        - IPv4
      ipFamilyPolicy: SingleStack
      ports:
        - name: https
          port: 443
          protocol: TCP
          targetPort: 8443
      sessionAffinity: None
      type: ClusterIP
    status:
      loadBalancer: {}
kind: List
metadata:
  resourceVersion: ""
  selfLink: ""
```

```console
vagrant@ubuntu-focal:~$ kubectl get services
NAME         TYPE           CLUSTER-IP     EXTERNAL-IP   PORT(S)          AGE
hello-node   LoadBalancer   10.109.209.3   <pending>     8080:31550/TCP   28s
kubernetes   ClusterIP      10.96.0.1      <none>        443/TCP          21d
```

```console
vagrant@ubuntu-focal:~$ kubectl delete service hello-node
service "hello-node" deleted
```

```console
vagrant@ubuntu-focal:~$ kubectl get services
NAME         TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE
kubernetes   ClusterIP   10.96.0.1    <none>        443/TCP   21d
```

```console
vagrant@ubuntu-focal:~$ kubectl get all
NAME                              READY   STATUS    RESTARTS   AGE
pod/hello-node-7567d9fdc9-6p26s   1/1     Running   0          79s

NAME                 TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE
service/kubernetes   ClusterIP   10.96.0.1    <none>        443/TCP   21d

NAME                         READY   UP-TO-DATE   AVAILABLE   AGE
deployment.apps/hello-node   1/1     1            1           79s

NAME                                    DESIRED   CURRENT   READY   AGE
replicaset.apps/hello-node-7567d9fdc9   1         1         1       79s
```

```console
vagrant@ubuntu-focal:~$ kubectl get deployments
NAME         READY   UP-TO-DATE   AVAILABLE   AGE
hello-node   1/1     1            1           82s
```

```console
vagrant@ubuntu-focal:~$ kubectl get pods
NAME                          READY   STATUS    RESTARTS   AGE
hello-node-7567d9fdc9-6p26s   1/1     Running   0          85s
```

```console
vagrant@ubuntu-focal:~$ kubectl delete deployment hello-node
deployment.apps "hello-node" deleted
```

```console
vagrant@ubuntu-focal:~$ kubectl get all
NAME                 TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE
service/kubernetes   ClusterIP   10.96.0.1    <none>        443/TCP   21d
```

```console
vagrant@ubuntu-focal:~$ kubectl get deployments
No resources found in default namespace.
```

```console
vagrant@ubuntu-focal:~$ kubectl get pods
No resources found in default namespace.
```

https://kubernetes.io/docs/tutorials/kubernetes-basics/deploy-app/

## 参考: Minikube の Pod 内のネットワーク

```console
vagrant@ubuntu-focal:~$ ip a
1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host
       valid_lft forever preferred_lft forever
2: enp0s3: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UP group default qlen 1000
    link/ether 02:31:14:45:32:03 brd ff:ff:ff:ff:ff:ff
    inet 10.0.2.15/24 brd 10.0.2.255 scope global dynamic enp0s3
       valid_lft 85865sec preferred_lft 85865sec
    inet6 fe80::31:14ff:fe45:3203/64 scope link
       valid_lft forever preferred_lft forever
4: docker0: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc noqueue state DOWN group default
    link/ether 02:42:82:d2:df:63 brd ff:ff:ff:ff:ff:ff
    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0
       valid_lft forever preferred_lft forever
    inet6 fe80::42:82ff:fed2:df63/64 scope link
       valid_lft forever preferred_lft forever
7: br-79d8378f226e: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default
    link/ether 02:42:96:01:14:a1 brd ff:ff:ff:ff:ff:ff
    inet 192.168.49.1/24 brd 192.168.49.255 scope global br-79d8378f226e
       valid_lft forever preferred_lft forever
    inet6 fe80::42:96ff:fe01:14a1/64 scope link
       valid_lft forever preferred_lft forever
15: vethc4e5996@if14: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue master br-79d8378f226e state UP group default
    link/ether 76:4a:55:b3:e9:5b brd ff:ff:ff:ff:ff:ff link-netnsid 0
    inet6 fe80::744a:55ff:feb3:e95b/64 scope link
       valid_lft forever preferred_lft forever

vagrant@ubuntu-focal:~$ kubectl get service/kubernetes
NAME         TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE
kubernetes   ClusterIP   10.96.0.1    <none>        443/TCP   100m

vagrant@ubuntu-focal:~$ kubectl exec -it debian -- /bin/bash
root@debian:/#

root@debian:/# ip a
1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
34: eth0@if35: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default
    link/ether 02:42:ac:11:00:0d brd ff:ff:ff:ff:ff:ff link-netnsid 0
    inet 172.17.0.13/16 brd 172.17.255.255 scope global eth0
       valid_lft forever preferred_lft forever

root@debian:/# ip r
default via 172.17.0.1 dev eth0
172.17.0.0/16 dev eth0 proto kernel scope link src 172.17.0.13

root@debian:/# ip link show type veth
34: eth0@if35: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP mode DEFAULT group default
    link/ether 02:42:ac:11:00:0d brd ff:ff:ff:ff:ff:ff link-netnsid 0

root@debian:/# ethtool -S eth0
NIC statistics:
     peer_ifindex: 35
     rx_queue_0_xdp_packets: 0
     rx_queue_0_xdp_bytes: 0
     rx_queue_0_xdp_drops: 0

vagrant@ubuntu-focal:~$ docker ps
CONTAINER ID   IMAGE                                 COMMAND                  CREATED       STATUS          PORTS                                                                                                                                  NAMES
39f8154e1e27   gcr.io/k8s-minikube/kicbase:v0.0.28   "/usr/local/bin/entr…"   2 hours ago   Up 30 minutes   127.0.0.1:49167->22/tcp, 127.0.0.1:49166->2376/tcp, 127.0.0.1:49165->5000/tcp, 127.0.0.1:49164->8443/tcp, 127.0.0.1:49163->32443/tcp   minikube

vagrant@ubuntu-focal:~$ docker exec -it 39f8154e1e27 /sbin/ip -o link | grep ^35
35: veth6a3d995@if34: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue master docker0 state UP mode DEFAULT group default \    link/ether b2:c4:e9:1e:19:4e brd ff:ff:ff:ff:ff:ff link-netnsid 12

vagrant@ubuntu-focal:~$ docker exec -it 39f8154e1e27 /sbin/brctl show
bridge name     bridge id               STP enabled     interfaces
docker0         8000.02422ec31099       no              veth08d3ce5
                                                        veth11dad47
                                                        veth518c336
                                                        veth6a3d995
                                                        veth81d9e62
                                                        veth93c7894
                                                        vethacdc005
                                                        vethb57d307
                                                        vethcc95dd8
                                                        vethf4f1444
                                                        vethfa1917d
                                                        vethfc9c3f4

vagrant@ubuntu-focal:~$ docker exec -it 39f8154e1e27 /sbin/ip -4 a
1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
2: docker0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default
    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0
       valid_lft forever preferred_lft forever
14: eth0@if15: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default  link-netnsid 0
    inet 192.168.49.2/24 brd 192.168.49.255 scope global eth0
       valid_lft forever preferred_lft forever

vagrant@ubuntu-focal:~$ brctl show
bridge name     bridge id               STP enabled     interfaces
br-79d8378f226e         8000.0242960114a1       no              vethc4e5996
docker0         8000.024282d2df63       no

vagrant@ubuntu-focal:~$ ip -4 a show dev br-79d8378f226e
7: br-79d8378f226e: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default
    inet 192.168.49.1/24 brd 192.168.49.255 scope global br-79d8378f226e
       valid_lft forever preferred_lft forever

vagrant@ubuntu-focal:~$ ip -4 a show dev docker0
4: docker0: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc noqueue state DOWN group default
    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0
       valid_lft forever preferred_lft forever
```

```text

    |
   -o---o-
        |
    ~~~~|~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        |
        | 10.0.2.15/24      | 172.17.0.1/16       | 192.168.49.1/24
        |                   | bridge              | bridge
        | ubuntu-focal      | ubuntu-focal        | ubuntu-focal
        enp0s3              docker0               br-79d8378f226e
                                                  |
                                                  15: vethc4e5996@if14
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~|~~~~~~~~~~~~~~~~~~~~
                                                  |
                            docker0               |
                            |                     |
                            |                     | 192.168.49.2/24
                            | minikube            | minikube
                            35: veth6a3d995@if34  14: eth0@if15
                            |
    ~~~~~~~~~~~~~~~~~~~~~~~~|~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                            |
                            | 172.17.0.13/16
                            | debian
                            34: eth0@if35
```


## 参考: minikube の機能一覧

```console
vagrant@buster:/tmp$ minikube version
minikube version: v1.24.0
commit: 76b94fb3c4e8ac5062daf70d60cf03ddcc0a741b
```

```console
vagrant@buster:/tmp$ minikube -h
minikube provisions and manages local Kubernetes clusters optimized for development workflows.

Basic Commands:
  start          Starts a local Kubernetes cluster
  status         Gets the status of a local Kubernetes cluster
  stop           Stops a running local Kubernetes cluster
  delete         Deletes a local Kubernetes cluster
  dashboard      Access the Kubernetes dashboard running within the minikube cluster
  pause          pause Kubernetes
  unpause        unpause Kubernetes

Images Commands:
  docker-env     Configure environment to use minikube's Docker daemon
  podman-env     Configure environment to use minikube's Podman service
  cache          Add, delete, or push a local image into minikube
  image          Manage images

Configuration and Management Commands:
  addons         Enable or disable a minikube addon
  config         Modify persistent configuration values
  profile        Get or list the current profiles (clusters)
  update-context Update kubeconfig in case of an IP or port change

Networking and Connectivity Commands:
  service        Returns a URL to connect to a service
  tunnel         Connect to LoadBalancer services

Advanced Commands:
  mount          Mounts the specified directory into minikube
  ssh            Log into the minikube environment (for debugging)
  kubectl        Run a kubectl binary matching the cluster version
  node           Add, remove, or list additional nodes
  cp             Copy the specified file into minikube

Troubleshooting Commands:
  ssh-key        Retrieve the ssh identity key path of the specified node
  ssh-host       Retrieve the ssh host key of the specified node
  ip             Retrieves the IP address of the specified node
  logs           Returns logs to debug a local Kubernetes cluster
  update-check   Print current and latest version number
  version        Print the version of minikube
  options        Show a list of global command-line options (applies to all commands).

Other Commands:
  completion     Generate command completion for a shell

Use "minikube <command> --help" for more information about a given command.
```
