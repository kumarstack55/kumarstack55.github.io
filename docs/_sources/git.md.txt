# Git

## 直前のブランチにスイッチする。

`git checkout -` で直前のブランチに変更できる。

```bash
cd $(mktemp -d)

git init
touch a
git add a
git commit -m fix
git checkout -b branch1

git branch
git checkout -
git branch
git checkout -
git branch
```

```console
$ git branch
* branch1
  master
$ git checkout -
Switched to branch 'master'
$ git branch
  branch1
* master
$ git checkout -
Switched to branch 'branch1'
$ git branch
* branch1
  master
```

https://git-scm.com/docs/git-switch

> To switch back to the previous branch before we switched to mytopic (i.e. "master" branch):
>
> $ git switch -

## Git LFS を利用する。

Git LFS はリモートの格納場所を指し示すテキストを git リポジトリに格納する仕組みのことです。
Git で大きなファイルの格納ができるし、リポジトリの肥大化を回避できるようになる。

[Git Large File Storage](https://git-lfs.github.com/) について次の記載がある:

> Git Large File Storage (LFS) replaces large files such as audio samples, videos, datasets, and graphics with text pointers inside Git, while storing the file contents on a remote server like GitHub.com or GitHub Enterprise.

### Git LFS でファイルを格納する。

ユーザー3名のうち、 `user1`, `user2` が git-lfs をインストール済みであり、 `user3` はインストールしていないことを想定したとき、それぞれの操作でどのように LFS 管理下としたファイルが見えるか確認する。
あらかじめ `git-lfs` をインストール済みか、 pull 前にインストールすれば、特に意識せず利用できる。
ところが `git-lfs` をインストールしていないユーザがいると、見え方が異なる。

git-lfs があれば、 lfs 管理下のファイルは意識せず編集できる。

git-lfs がなければ、 lfs 管理下のファイルはポインタ情報が表示される。

```bash
# リポジトリが存在するか判定する。
gh_repo_exists() {
  gh repo list --json name --jq "map(select(.name == \"$1\")) | length == 1" \
    | grep -q true
}

# リポジトリを削除済みにする。
ensure_gh_repo_deleted() {
  gh_repo_exists "$1" \
    && gh repo delete --confirm "$1"
}

# 指定パッケージがインストール済みか判定する。
is_deb_installed() {
  dpkg -l \
    | grep '^ii' \
    | awk '{print $2}' \
    | grep -Pq "^\Q$1\E$"
}

# パッケージを削除済みにする。
ensure_deb_removed() {
  is_deb_installed "$1" \
    && sudo apt-get remove -y "$1" 1>&2 >/dev/null
}

# パッケージをインストール済みにする。
ensure_deb_installed() {
  is_deb_installed "$1" \
    || sudo apt-get install "$1" -y 1>&2 >/dev/null
}

tmpdir=$(mktemp -d)
cd "$tmpdir"

repos_dir="$tmpdir"
user1_dir="$repos_dir/user1"
user2_dir="$repos_dir/user2"
user3_dir="$repos_dir/user3"

user1_repo_name="repo_b"
user2_repo_name="repo_c"
user3_repo_name="repo_d"

user1_repo_dir="$user1_dir/$user1_repo_name"
user2_repo_dir="$user2_dir/$user2_repo_name"
user3_repo_dir="$user3_dir/$user3_repo_name"

mkdir -pv "$user1_repo_dir"
mkdir -pv "$user2_repo_dir"
mkdir -pv "$user3_repo_dir"

ensure_gh_repo_deleted "repo1"
ensure_deb_removed "git-lfs"

# GitHub のプロジェクト相当の git リポジトリを作る。
gh repo create --private "repo1"
remote_repo_url=$(gh repo view repo1 --json sshUrl --jq .sshUrl)
echo "$remote_repo_url"
```

```bash
# ユーザー user1 がローカルリポジトリをクローン、コミット、プッシュする。
cd "$user1_dir"
git clone "$remote_repo_url" "./$user1_repo_name"
cd "$user1_repo_dir"
git config user.email "user1@example.com"
git config user.name "user1"
echo a >file1.txt
echo a >file1.bin
git status
git add .
git status
git commit -m "commit1"
git status
git push
git status

# user1 が *.bin を LFS 管理下にしてプッシュする。
git lfs version
ensure_deb_installed "git-lfs"
git lfs version

ls -ln
git status
git diff
git diff --cached
git lfs status
git lfs ls-files

git lfs track "*.bin"

ls -ln
  # --> ファイルサイズは 2
git status
  # --> file1.bin, .gitattributes が変更されている。
git diff
git diff --cached
git lfs status
  # --> not staged for commit に file1.bin が存在する。
git lfs ls-files
  # --> 何も表示されない。

cat .gitattributes
git add .

ls -ln
git status
git diff
git diff --cached
git lfs status
  # --> to be committed に file1.bin が存在する。
git lfs ls-files
  # --> file1.bin が存在する。

git commit -m "commit2"

ls -ln
git status
git diff
git diff --cached
git lfs status
  # --> to be pushed に file1.bin が存在する。
git lfs ls-files
  # --> file1.bin が存在する。

git push

ls -ln
git status
git diff
git diff --cached
git lfs status
  # --> 表示されない。
git lfs ls-files
  # --> file1.bin が存在する。
```

```bash
# ユーザー user2 のローカルリポジトリを GitHub からクローンする。
# このユーザは `ls -l` などの出力では相違がない状態となる。
ensure_deb_installed "git-lfs"
git lfs version

cd "$user2_dir"
git clone "$remote_repo_url" "./$user2_repo_name"
cd "$user2_repo_dir"
git config user.email "user2@example.com"
git config user.name "user2"

ls -ln
  # --> ファイルサイズは2
git status
git diff
git diff --cached
git lfs status
git lfs ls-files

cat file1.bin
```

```bash
# ユーザー user3 のローカルリポジトリを GitHub からクローンする。
# このユーザは `ls -l` などの出力では別のファイルとして見える。
ensure_deb_removed "git-lfs"
git lfs version

cd "$user3_dir"
git clone "$remote_repo_url" "./$user3_repo_name"
cd "$user3_repo_dir"
git config user.email "user3@example.com"
git config user.name "user3"

ls -ln
  # --> file1.bin のファイルサイズは2ではない。
git status
git diff
git diff --cached
git lfs status
git lfs ls-files

cat file1.bin
```

### ユーザ1の操作

```console
$ cd "$user1_dir"
$ git clone "$remote_repo_url" "./$user1_repo_name"
Cloning into './repo_b'...
warning: You appear to have cloned an empty repository.
$ cd "$user1_repo_dir"
$ git config user.email "user1@example.com"
$ git config user.name "user1"
$ echo a >file1.txt
$ echo a >file1.bin
$ git status
On branch master

No commits yet

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        file1.bin
        file1.txt

nothing added to commit but untracked files present (use "git add" to track)
$ git add .
$ git status
On branch master

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)
        new file:   file1.bin
        new file:   file1.txt

$ git commit -m "commit1"
[master (root-commit) d18764c] commit1
 2 files changed, 2 insertions(+)
 create mode 100644 file1.bin
 create mode 100644 file1.txt
$ git status
On branch master
Your branch is based on 'origin/master', but the upstream is gone.
  (use "git branch --unset-upstream" to fixup)

nothing to commit, working tree clean
$ git push
Enumerating objects: 3, done.
Counting objects: 100% (3/3), done.
Delta compression using up to 8 threads
Compressing objects: 100% (2/2), done.
Writing objects: 100% (3/3), 211 bytes | 211.00 KiB/s, done.
Total 3 (delta 0), reused 0 (delta 0)
git status
To github.com:kumarstack55/repo1.git
 * [new branch]      master -> master
$ git status
On branch master
Your branch is up to date with 'origin/master'.

nothing to commit, working tree clean
$
```

```console
$ git lfs version
fatal: 'lfs' appears to be a git command, but we were not
able to execute it. Maybe git-lfs is broken?
$ ensure_deb_installed "git-lfs"
$ git lfs version
git-lfs/2.9.2 (GitHub; linux amd64; go 1.13.5)
$ ls -ln
total 8
-rw-r--r-- 1 1000 1000 2 May 17 16:19 file1.bin
-rw-r--r-- 1 1000 1000 2 May 17 16:19 file1.txt
$ git status
On branch master
Your branch is up to date with 'origin/master'.

nothing to commit, working tree clean
$ git diff
$ git diff --cached
$ git lfs status
On branch master
Git LFS objects to be pushed to origin/master:


Git LFS objects to be committed:


Git LFS objects not staged for commit:


$ git lfs ls-files
$ git lfs track "*.bin"
Tracking "*.bin"
$ ls -ln
total 8
-rw-r--r-- 1 1000 1000 2 May 17 16:21 file1.bin
-rw-r--r-- 1 1000 1000 2 May 17 16:19 file1.txt
$ git status
On branch master
Your branch is up to date with 'origin/master'.

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   file1.bin

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        .gitattributes

no changes added to commit (use "git add" and/or "git commit -a")
$ git diff
diff --git a/file1.bin b/file1.bin
index 7898192..0638816 100644
--- a/file1.bin
+++ b/file1.bin
@@ -1 +1,3 @@
-a
+version https://git-lfs.github.com/spec/v1
+oid sha256:87428fc522803d31065e7bce3cf03fe475096631e5e07bbd7a0fde60c4cf25c7
+size 2
$ git diff --cached
$ git lfs status
On branch master
Git LFS objects to be pushed to origin/master:


Git LFS objects to be committed:


Git LFS objects not staged for commit:

        file1.bin (Git: 87428fc -> File: 87428fc)

$ git lfs ls-files
$ cat .gitattributes
*.bin filter=lfs diff=lfs merge=lfs -text
$ git add .
$ ls -ln
total 8
-rw-r--r-- 1 1000 1000 2 May 17 16:21 file1.bin
-rw-r--r-- 1 1000 1000 2 May 17 16:19 file1.txt
$ git status
On branch master
Your branch is up to date with 'origin/master'.

Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        new file:   .gitattributes
        modified:   file1.bin

$ git diff
$ git diff --cached
diff --git a/.gitattributes b/.gitattributes
new file mode 100644
index 0000000..4edd5ac
--- /dev/null
+++ b/.gitattributes
@@ -0,0 +1 @@
+*.bin filter=lfs diff=lfs merge=lfs -text
diff --git a/file1.bin b/file1.bin
index 7898192..0638816 100644
--- a/file1.bin
+++ b/file1.bin
@@ -1 +1,3 @@
-a
+version https://git-lfs.github.com/spec/v1
+oid sha256:87428fc522803d31065e7bce3cf03fe475096631e5e07bbd7a0fde60c4cf25c7
+size 2
$ git lfs status
On branch master
Git LFS objects to be pushed to origin/master:


Git LFS objects to be committed:

        .gitattributes (Git: 35c9aa1)
        file1.bin (Git: 87428fc -> LFS: 87428fc)

Git LFS objects not staged for commit:


$ git lfs ls-files
87428fc522 * file1.bin
$ git commit -m "commit2"
[master 8ab6bda] commit2
 2 files changed, 4 insertions(+), 1 deletion(-)
 create mode 100644 .gitattributes
$ ls -ln
total 8
-rw-r--r-- 1 1000 1000 2 May 17 16:21 file1.bin
-rw-r--r-- 1 1000 1000 2 May 17 16:19 file1.txt
$ git status
On branch master
Your branch is ahead of 'origin/master' by 1 commit.
  (use "git push" to publish your local commits)

nothing to commit, working tree clean
$ git diff
$ git diff --cached
$ git lfs status
On branch master
Git LFS objects to be pushed to origin/master:

        file1.bin (87428fc522803d31065e7bce3cf03fe475096631e5e07bbd7a0fde60c4cf25c7)

Git LFS objects to be committed:


Git LFS objects not staged for commit:


$ git lfs ls-files
87428fc522 * file1.bin
$ git push
Uploading LFS objects: 100% (1/1), 2 B | 0 B/s, done.
Enumerating objects: 6, done.
Counting objects: 100% (6/6), done.
Delta compression using up to 8 threads
Compressing objects: 100% (3/3), done.
Writing objects: 100% (4/4), 449 bytes | 449.00 KiB/s, done.
Total 4 (delta 0), reused 0 (delta 0)
To github.com:kumarstack55/repo1.git
   d18764c..8ab6bda  master -> master
$ ls -ln
total 8
-rw-r--r-- 1 1000 1000 2 May 17 16:21 file1.bin
-rw-r--r-- 1 1000 1000 2 May 17 16:19 file1.txt
$ git status
On branch master
Your branch is up to date with 'origin/master'.

nothing to commit, working tree clean
$ git diff
$ git diff --cached
$ git lfs status
On branch master
Git LFS objects to be pushed to origin/master:


Git LFS objects to be committed:


Git LFS objects not staged for commit:


$ git lfs ls-files
87428fc522 * file1.bin
```

### ユーザ2の操作

```console
$ ensure_deb_installed "git-lfs"
$ git lfs version
git-lfs/2.9.2 (GitHub; linux amd64; go 1.13.5)
$ cd "$user2_dir"
$ git clone "$remote_repo_url" "./$user2_repo_name"
Cloning into './repo_c'...
remote: Enumerating objects: 7, done.
remote: Counting objects: 100% (7/7), done.
remote: Compressing objects: 100% (5/5), done.
remote: Total 7 (delta 0), reused 7 (delta 0), pack-reused 0
Receiving objects: 100% (7/7), done.
$ cd "$user2_repo_dir"
$ git config user.email "user2@example.com"
$ git config user.name "user2"
$ ls -ln
total 8
-rw-r--r-- 1 1000 1000 2 May 17 16:27 file1.bin
-rw-r--r-- 1 1000 1000 2 May 17 16:27 file1.txt
$ git status
On branch master
Your branch is up to date with 'origin/master'.

nothing to commit, working tree clean
$ git diff
$ git diff --cached
$ git lfs status
On branch master
Git LFS objects to be pushed to origin/master:


Git LFS objects to be committed:


Git LFS objects not staged for commit:


$ git lfs ls-files
87428fc522 * file1.bin
$ cat file1.bin
a
```

### ユーザ3の操作

```console
$ ensure_deb_removed "git-lfs"
$ git lfs version
fatal: 'lfs' appears to be a git command, but we were not
able to execute it. Maybe git-lfs is broken?
$ cd "$user3_dir"
$ git clone "$remote_repo_url" "./$user3_repo_name"
Cloning into './repo_d'...
remote: Enumerating objects: 7, done.
remote: Counting objects: 100% (7/7), done.
remote: Compressing objects: 100% (5/5), done.
remote: Total 7 (delta 0), reused 7 (delta 0), pack-reused 0
Receiving objects: 100% (7/7), done.
$ cd "$user3_repo_dir"
$ git config user.email "user3@example.com"
$ git config user.name "user3"
$ ls -ln
total 8
-rw-r--r-- 1 1000 1000 126 May 17 16:29 file1.bin
-rw-r--r-- 1 1000 1000   2 May 17 16:29 file1.txt
$ git status
On branch master
Your branch is up to date with 'origin/master'.

nothing to commit, working tree clean
$ git diff
$ git diff --cached
$ git lfs status
fatal: 'lfs' appears to be a git command, but we were not
able to execute it. Maybe git-lfs is broken?
$ git lfs ls-files
fatal: 'lfs' appears to be a git command, but we were not
able to execute it. Maybe git-lfs is broken?
$ cat file1.bin
version https://git-lfs.github.com/spec/v1
oid sha256:87428fc522803d31065e7bce3cf03fe475096631e5e07bbd7a0fde60c4cf25c7
size 2
```

### Git LFS で git-lfs が有効でないユーザがファイルを上書きしたときの挙動は？

関数定義は、直前の見出しを参照してください。

```bash
ensure_gh_repo_deleted "repo1"
ensure_deb_installed "git-lfs"

gh repo create --private "repo1"
remote_repo_url=$(gh repo view repo1 --json sshUrl --jq .sshUrl)
echo "$remote_repo_url"

cd "$user1_dir"
git clone "$remote_repo_url" "./$user1_repo_name"

cd "$user1_repo_dir"
git config user.email "user1@example.com"
git config user.name "user1"

echo a >file1.txt

git lfs track "*.bin"
echo a >file1.bin

git add .
git commit -m "commit1"
git push
git status

ensure_deb_removed "git-lfs"
cd "$user2_dir"
git clone "$remote_repo_url" "./$user2_repo_name"
cd "$user2_repo_dir"
git config user.email "user2@example.com"
git config user.name "user2"

cat file1.bin
echo b >file1.bin
git status
git add .
git commit -m "commit2"
git push

ensure_deb_installed "git-lfs"
cd "$user1_repo_dir"
git pull
```

次のメッセージが出力される。

```console
$ git pull
remote: Enumerating objects: 5, done.
remote: Counting objects: 100% (5/5), done.
remote: Compressing objects: 100% (2/2), done.
remote: Total 3 (delta 0), reused 3 (delta 0), pack-reused 0
Unpacking objects: 100% (3/3), 277 bytes | 277.00 KiB/s, done.
From github.com:kumarstack55/repo1
   98e4e0a..0d2cf8b  master     -> origin/master
Updating 98e4e0a..0d2cf8b
Fast-forward
 file1.bin | 4 +---
 1 file changed, 1 insertion(+), 3 deletions(-)
Encountered 1 file(s) that should have been pointers, but weren't:
        file1.bin
```

file1.bin に対する履歴を確認し、適切な内容に修正すればよい。

```bash
git log --oneline -i file1.bin


git checkout 98e4e0a
cp -aiv file1.bin /tmp/file1.bin.98e4e0a

ls -l /tmp/file1.bin.*
md5sum /tmp/file1.bin.*
```

```bash
# この場合、以下で直すのがよさそう。
# これで、file1.bin は b の内容を持つポインタとなる。
git lfs uninstall
git reset --hard
git lfs install
git lfs pull
git status
git diff
ls -ln

git diff 98e4e0a

# ファイルをコピーして比較する。(もっといい方法がありそう。)
cp -aiv file1.bin /tmp/file1.bin.master
git commit -m 'change files to a pointer to the lfs'
git checkout 98e4e0a
cp -aiv file1.bin /tmp/file1.bin.98e4e0a
diff -u /tmp/file1.bin.98e4e0a /tmp/file1.bin.master
```

```diff
$ git diff 98e4e0a
diff --git a/file1.bin b/file1.bin
index 0638816..b42fdff 100644
--- a/file1.bin
+++ b/file1.bin
@@ -1,3 +1,3 @@
 version https://git-lfs.github.com/spec/v1
-oid sha256:87428fc522803d31065e7bce3cf03fe475096631e5e07bbd7a0fde60c4cf25c7
+oid sha256:0263829989b6fd954f72baaf2fc64bc2e2f01d692d4de72986ea808f6e99813f
 size 2
```

```diff
$ diff -u /tmp/file1.bin.98e4e0a /tmp/file1.bin.master
--- /tmp/file1.bin.98e4e0a      2022-05-17 21:03:16.825163429 +0900
+++ /tmp/file1.bin.master       2022-05-17 17:10:00.285512571 +0900
@@ -1 +1 @@
-a
+b
```

* https://monry.hatenablog.com/entry/2017/08/01/232045
    * git lfs clone , git lfs install に関する記述がある。
* https://qiita.com/kazuki-ma/items/782cd1cd7eca2fe988b7
    * `git update-index --asume-unchanged -- "元ファイル"` に関する記述がある。
* https://github.com/git-lfs/git-lfs/issues/1939
    * `git lfs uninstall`, `git reset --hard`, `git lfs install`, `git lfs pull` に関する記述がある。

## タグを利用する。

### 手順

```bash
get_commit_hash() {
  git rev-parse HEAD
}

tmpdir=$(mktemp -d)
cd "$tmpdir"

git init

git config user.email "you@example.com"
git config user.name "Your Name"

echo a >file1.txt
git add file1.txt
git commit -m 'commit1'
git log --pretty=short
commit1_hash=$(get_commit_hash)
echo "$commit1_hash"

echo b >file2.txt
git add file2.txt
git commit -m 'commit2'
commit2_hash=$(get_commit_hash)
echo "$commit2_hash"
git log --pretty=short

git tag
git tag -a 'tagname1' -m 'tag message1'
git tag
git show 'tagname1'
git log --pretty=short

git tag -a 'tagname1' -m 'tag message1'
  # --> fatal: tag 'tagname1' already exists

echo c >file3.txt
git add file3.txt
git commit -m 'commit3'
commit3_hash=$(get_commit_hash)
echo "$commit3_hash"
git log --pretty=short

git branch
  # --> master
git log --pretty=short
git checkout 'tagname1'
git log --pretty=short
git checkout master
git log --pretty=short

git branch
  # --> master
git log --pretty=short
git checkout -b 'tagname1'
git log --pretty=short
git checkout master
git log --pretty=short
git branch

# 今回はローカルのリポジトリだが origin が別にあるなら：
#git push origin --tags
```

### 手順を実行した結果

#### commit1 を行う。

```console
$ echo a >file1.txt
$ git add file1.txt
$ git commit -m 'commit1'
[master (root-commit) aa0e88d] commit1
 1 file changed, 1 insertion(+)
 create mode 100644 file1.txt
$ git log --pretty=short
commit aa0e88d4ed59914a29a40c3b17e29c88ecfd69f1 (HEAD -> master)
Author: Your Name <you@example.com>

    commit1
$ commit1_hash=$(get_commit_hash)
$ echo "$commit1_hash"
aa0e88d4ed59914a29a40c3b17e29c88ecfd69f1
```

#### commit2 を行う。

```console
$ echo b >file2.txt
$ git add file2.txt
$ git commit -m 'commit2'
[master 62ce6b0] commit2
 1 file changed, 1 insertion(+)
 create mode 100644 file2.txt
$ commit2_hash=$(get_commit_hash)
$ echo "$commit2_hash"
62ce6b0f1beea6d27c16225d60057c6e5d9f79d6
$ git log --pretty=short
commit 62ce6b0f1beea6d27c16225d60057c6e5d9f79d6 (HEAD -> master)
Author: Your Name <you@example.com>

    commit2

commit aa0e88d4ed59914a29a40c3b17e29c88ecfd69f1
Author: Your Name <you@example.com>

    commit1
```

#### タグを作る。

```console
$ git tag
$ git tag -a 'tagname1' -m 'tag message1'
$ git tag
tagname1
$ git show 'tagname1'
tag tagname1
Tagger: Your Name <you@example.com>
Date:   Sat May 7 10:16:08 2022 +0900

tag message1

commit 62ce6b0f1beea6d27c16225d60057c6e5d9f79d6 (HEAD -> master, tag: tagname1)
Author: Your Name <you@example.com>
Date:   Sat May 7 10:15:41 2022 +0900

    commit2

diff --git a/file2.txt b/file2.txt
new file mode 100644
index 0000000..6178079
--- /dev/null
+++ b/file2.txt
@@ -0,0 +1 @@
+b
$ git log --pretty=short
commit 62ce6b0f1beea6d27c16225d60057c6e5d9f79d6 (HEAD -> master, tag: tagname1)
Author: Your Name <you@example.com>

    commit2

commit aa0e88d4ed59914a29a40c3b17e29c88ecfd69f1
Author: Your Name <you@example.com>

    commit1
$ git tag -a 'tagname1' -m 'tag message1'
fatal: tag 'tagname1' already exists
```

#### commit3 を行う。

```console
$ echo c >file3.txt
$ git add file3.txt
$ git commit -m 'commit3'
[master c7e9303] commit3
 1 file changed, 1 insertion(+)
 create mode 100644 file3.txt
$ commit3_hash=$(get_commit_hash)
$ echo "$commit3_hash"
c7e930316bb8b7ae700f5fefcd473d806392cc8f
$ git log --pretty=short
commit c7e930316bb8b7ae700f5fefcd473d806392cc8f (HEAD -> master)
Author: Your Name <you@example.com>

    commit3

commit 62ce6b0f1beea6d27c16225d60057c6e5d9f79d6 (tag: tagname1)
Author: Your Name <you@example.com>

    commit2

commit aa0e88d4ed59914a29a40c3b17e29c88ecfd69f1
Author: Your Name <you@example.com>

    commit1
```

#### ブランチ作成なしの checkout を行う。

```console
$ git branch
* master
$ git log --pretty=short
commit c7e930316bb8b7ae700f5fefcd473d806392cc8f (HEAD -> master)
Author: Your Name <you@example.com>

    commit3

commit 62ce6b0f1beea6d27c16225d60057c6e5d9f79d6 (tag: tagname1)
Author: Your Name <you@example.com>

    commit2

commit aa0e88d4ed59914a29a40c3b17e29c88ecfd69f1
Author: Your Name <you@example.com>

    commit1
$ git checkout 'tagname1'
Note: switching to 'tagname1'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at 62ce6b0 commit2
$ git log --pretty=short
commit 62ce6b0f1beea6d27c16225d60057c6e5d9f79d6 (HEAD, tag: tagname1)
Author: Your Name <you@example.com>

    commit2

commit aa0e88d4ed59914a29a40c3b17e29c88ecfd69f1
Author: Your Name <you@example.com>

    commit1
$ git checkout master
Previous HEAD position was 62ce6b0 commit2
Switched to branch 'master'
$ git log --pretty=short
commit c7e930316bb8b7ae700f5fefcd473d806392cc8f (HEAD -> master)
Author: Your Name <you@example.com>

    commit3

commit 62ce6b0f1beea6d27c16225d60057c6e5d9f79d6 (tag: tagname1)
Author: Your Name <you@example.com>

    commit2

commit aa0e88d4ed59914a29a40c3b17e29c88ecfd69f1
Author: Your Name <you@example.com>

    commit1
```

#### ブランチ作成ありの checkout を行う。

```console
$ git branch
* master
$ git log --pretty=short
commit c7e930316bb8b7ae700f5fefcd473d806392cc8f (HEAD -> master)
Author: Your Name <you@example.com>

    commit3

commit 62ce6b0f1beea6d27c16225d60057c6e5d9f79d6 (tag: tagname1)
Author: Your Name <you@example.com>

    commit2

commit aa0e88d4ed59914a29a40c3b17e29c88ecfd69f1
Author: Your Name <you@example.com>

    commit1
$ git checkout -b 'tagname1'
Switched to a new branch 'tagname1'
$ git log --pretty=short
commit c7e930316bb8b7ae700f5fefcd473d806392cc8f (HEAD -> tagname1, master)
Author: Your Name <you@example.com>

    commit3

commit 62ce6b0f1beea6d27c16225d60057c6e5d9f79d6 (tag: tagname1)
Author: Your Name <you@example.com>

    commit2

commit aa0e88d4ed59914a29a40c3b17e29c88ecfd69f1
Author: Your Name <you@example.com>

    commit1
$ git checkout master
Switched to branch 'master'
$ git log --pretty=short
commit c7e930316bb8b7ae700f5fefcd473d806392cc8f (HEAD -> master, tagname1)
Author: Your Name <you@example.com>

    commit3

commit 62ce6b0f1beea6d27c16225d60057c6e5d9f79d6 (tag: tagname1)
Author: Your Name <you@example.com>

    commit2

commit aa0e88d4ed59914a29a40c3b17e29c88ecfd69f1
Author: Your Name <you@example.com>

    commit1
$ git branch
* master
  tagname1
```

### 参考資料

* [Git Basics - Tagging](https://git-scm.com/book/en/v2/Git-Basics-Tagging)
* [Git の基本 - タグ](https://git-scm.com/book/ja/v2/Git-%E3%81%AE%E5%9F%BA%E6%9C%AC-%E3%82%BF%E3%82%B0)


## リポジトリとリポジトリの依存関係を submodule で管理する。

* `git submodule` でリポジトリの下に別のリポジトリをサブモジュールとして登録できる。
    * リポジトリ内で、別のリポジトリのURLが `.gitmodules` ファイルに保管される。
    * .gitmodules には保管されないが、 commit ハッシュが管理される。
    * commit ハッシュは `git submodule status` や `git diff` で出力できる。

### リポジトリ sandbox-repo-main にリポジトリ sandbox-repo-sub を加える。

```powershell
# リポジトリがあれば消す。
repo_main="sandbox-repo-main"
repo_sub="sandbox-repo-sub"

test_sandbox() {
  [[ "$1" =~ ^sandbox- ]]
}

delete_sandbox_repo() {
  if ! test_sandbox "$1"; then
    echo "ERROR: repo is not sandbox." >&2
    return 1
  fi
  gh repo list --json name -q "map(select(.name==\"$1\")) | length == 1" \
    | grep -q true \
    && gh repo delete "$1" --confirm
}

delete_sandbox_repo "$repo_main"
delete_sandbox_repo "$repo_sub"

# リポジトリを作る。
gh repo create "$repo_main" --private
gh repo create "$repo_sub" --private

tmp_dir="$(mktemp -d)"
cd "$tmp_dir"

# リポジトリにファイルを作る。
add_readme_into_repo() {
  git clone "$(gh repo view "$1" --json sshUrl -q '.sshUrl')"
  (
    cd "$1"
    echo "# $1" >README.md
    git add README.md
    git commit -m "Add README.md"
    git push
  )
}
add_readme_into_repo "$repo_main"
add_readme_into_repo "$repo_sub"

# リポジトリに submodule を加える。
cd "$tmp_dir/$repo_sub"

mkdir -pv "$tmp_dir/$repo_main/depends_on"
cd "$tmp_dir/$repo_main/depends_on"

git status
cat "$tmp_dir/$repo_main/.git/config"
git diff --cached
git submodule status
  # $ git status
  # On branch master
  # Your branch is up to date with 'origin/master'.
  #
  # nothing to commit, working tree clean
  # $ cat "$tmp_dir/$repo_main/.git/config"
  # [core]
  #         repositoryformatversion = 0
  #         filemode = true
  #         bare = false
  #         logallrefupdates = true
  # [remote "origin"]
  #         url = git@github.com:kumarstack55/sandbox-repo-main.git
  #         fetch = +refs/heads/*:refs/remotes/origin/*
  # [branch "master"]
  #         remote = origin
  #         merge = refs/heads/master
  # $ git diff --cached
  # $ git submodule status

repo_url="$(gh repo view "$repo_sub" --json sshUrl -q ".sshUrl")"
git submodule add "$repo_url"
  # $ git submodule add "$repo_url"
  # Cloning into '/tmp/tmp.t3q2JZ21Yw/sandbox-repo-main/depends_on/sandbox-repo-sub'...
  # remote: Enumerating objects: 3, done.
  # remote: Counting objects: 100% (3/3), done.
  # Receiving objects: 100% (3/3), done.
  # remote: Total 3 (delta 0), reused 3 (delta 0), pack-reused 0

git status
cat "$tmp_dir/$repo_main/.git/config"
git diff --cached
git submodule status
  # $ git status
  # On branch master
  # Your branch is up to date with 'origin/master'.
  #
  # Changes to be committed:
  #   (use "git restore --staged <file>..." to unstage)
  #         new file:   ../.gitmodules
  #         new file:   sandbox-repo-sub
  #
  # $ cat "$tmp_dir/$repo_main/.git/config"
  # [core]
  #         repositoryformatversion = 0
  #         filemode = true
  #         bare = false
  #         logallrefupdates = true
  # [remote "origin"]
  #         url = git@github.com:kumarstack55/sandbox-repo-main.git
  #         fetch = +refs/heads/*:refs/remotes/origin/*
  # [branch "master"]
  #         remote = origin
  #         merge = refs/heads/master
  # [submodule "depends_on/sandbox-repo-sub"]
  #         url = git@github.com:kumarstack55/sandbox-repo-sub.git
  #         active = true
  # $ git diff --cached
  # diff --git a/.gitmodules b/.gitmodules
  # new file mode 100644
  # index 0000000..1714231
  # --- /dev/null
  # +++ b/.gitmodules
  # @@ -0,0 +1,3 @@
  # +[submodule "depends_on/sandbox-repo-sub"]
  # +       path = depends_on/sandbox-repo-sub
  # +       url = git@github.com:kumarstack55/sandbox-repo-sub.git
  # diff --git a/depends_on/sandbox-repo-sub b/depends_on/sandbox-repo-sub
  # new file mode 160000
  # index 0000000..8984b69
  # --- /dev/null
  # +++ b/depends_on/sandbox-repo-sub
  # @@ -0,0 +1 @@
  # +Subproject commit 8984b6939db28ac7bb181efb3a9564f7405c3ef4
  # $ git submodule status
  #  8984b6939db28ac7bb181efb3a9564f7405c3ef4 sandbox-repo-sub (heads/master)

git commit -m "Add submodule $repo_sub"
  # $ git commit -m "Add submodule $repo_sub"
  # [master ab32493] Add submodule sandbox-repo-sub
  #  2 files changed, 4 insertions(+)
  #  create mode 100644 .gitmodules
  #  create mode 160000 depends_on/sandbox-repo-sub

git push
  # $ git push
  # Enumerating objects: 5, done.
  # Counting objects: 100% (5/5), done.
  # Delta compression using up to 8 threads
  # Compressing objects: 100% (3/3), done.
  # Writing objects: 100% (4/4), 471 bytes | 471.00 KiB/s, done.
  # Total 4 (delta 0), reused 0 (delta 0)
  # To github.com:kumarstack55/sandbox-repo-main.git
  #    a0e8e89..ab32493  master -> master
```

### リポジトリ sandbox-repo-main をクローンする。

```bash
tmp_dir="$(mktemp -d)"
cd "$tmp_dir"

repo_url="$(gh repo view "$repo_main" --json sshUrl -q ".sshUrl")"
git clone --recurse-submodules "$repo_url"
  # $ git clone --recurse-submodules "$repo_url"
  # Cloning into 'sandbox-repo-main'...
  # remote: Enumerating objects: 7, done.
  # remote: Counting objects: 100% (7/7), done.
  # remote: Compressing objects: 100% (4/4), done.
  # remote: Total 7 (delta 0), reused 7 (delta 0), pack-reused 0
  # Receiving objects: 100% (7/7), done.
  # Submodule 'depends_on/sandbox-repo-sub' (git@github.com:kumarstack55/sandbox-repo-sub.git) registered for path 'depends_on/sandbox-repo-sub'
  # Cloning into '/tmp/tmp.Y6cobs6LU0/sandbox-repo-main/depends_on/sandbox-repo-sub'...
  # remote: Enumerating objects: 3, done.
  # remote: Counting objects: 100% (3/3), done.
  # remote: Total 3 (delta 0), reused 3 (delta 0), pack-reused 0
  # Receiving objects: 100% (3/3), done.
  # Submodule path 'depends_on/sandbox-repo-sub': checked out '8984b6939db28ac7bb181efb3a9564f7405c3ef4'

# または
#git clone "$repo_url"
#cd "$repo_main"
#git submodule update --init

cd "$tmp_dir/$repo_main/depends_on/$repo_sub"
git status
  # $ git status
  # HEAD detached at 8984b69
  # nothing to commit, working tree clean
```

### リポジトリ sandbox-repo-main のリポジトリ sandbox-repo-sub の commit を更新する。

#### sandbox-repo-sub で commit を指定して更新する。

```bash
tmp_dir="$(mktemp -d)"
cd "$tmp_dir"

# リポジトリ sandbox-repo-sub にファイルを加える。
repo_url="$(gh repo view "$repo_sub" --json sshUrl -q ".sshUrl")"
git clone "$repo_url"

cd "$tmp_dir/$repo_sub"

echo "# b" >b.txt
git add "b.txt"
git commit -m "Add b.txt"
  # $ git commit -m "Add b.txt"
  # [master 0eade58] Add b.txt
  #  1 file changed, 1 insertion(+)
  #  create mode 100644 b.txt
git log --pretty=format:"%H %s"
  # $ git log --pretty=format:"%H %s"
  # 0eade58d0d7485282b2d2ef45e4046790643d031 Add b.txt
  # 8984b6939db28ac7bb181efb3a9564f7405c3ef4 Add README.md

git push
  # $ git push
  # Enumerating objects: 4, done.
  # Counting objects: 100% (4/4), done.
  # Delta compression using up to 8 threads
  # Compressing objects: 100% (2/2), done.
  # Writing objects: 100% (3/3), 273 bytes | 273.00 KiB/s, done.
  # Total 3 (delta 0), reused 0 (delta 0)
  # To github.com:kumarstack55/sandbox-repo-sub.git
  #    8984b69..0eade58  master -> master

commit_hash=$(git log --pretty=format:"%H" -1)
echo "$commit_hash"
  # $ echo "$commit_hash"
  # 0eade58d0d7485282b2d2ef45e4046790643d031

# リポジトリ sandbox-repo-main の commit を変更する。
cd "$tmp_dir"
repo_url="$(gh repo view "$repo_main" --json sshUrl -q ".sshUrl")"
git clone --recurse-submodules "$repo_url"
  # $ git clone --recurse-submodules "$repo_url"
  # Cloning into 'sandbox-repo-main'...
  # remote: Enumerating objects: 7, done.
  # remote: Counting objects: 100% (7/7), done.
  # remote: Compressing objects: 100% (4/4), done.
  # remote: Total 7 (delta 0), reused 7 (delta 0), pack-reused 0
  # Receiving objects: 100% (7/7), done.
  # Submodule 'depends_on/sandbox-repo-sub' (git@github.com:kumarstack55/sandbox-repo-sub.git) registered for path 'depends_on/sandbox-repo-sub'
  # Cloning into '/tmp/tmp.vF55SDwV5c/sandbox-repo-main/depends_on/sandbox-repo-sub'...
  # remote: Enumerating objects: 6, done.
  # remote: Counting objects: 100% (6/6), done.
  # remote: Compressing objects: 100% (3/3), done.
  # remote: Total 6 (delta 0), reused 6 (delta 0), pack-reused 0
  # Receiving objects: 100% (6/6), done.
  # Submodule path 'depends_on/sandbox-repo-sub': checked out '8984b6939db28ac7bb181efb3a9564f7405c3ef4'

cd "$tmp_dir/$repo_main/depends_on/$repo_sub"
git status
  # $ git status
  # HEAD detached at 8984b69
  # nothing to commit, working tree clean
git log --oneline
  # $ git log --oneline
  # 8984b69 (HEAD) Add README.md

# 変更したいコミット番号に変える。
git fetch
git reset --hard origin/master
  # $ git reset --hard origin/master
  # HEAD is now at 0eade58 Add b.txt
#git checkout "$commit_hash"

git status
  # HEAD detached from 8984b69
  # nothing to commit, working tree clean
git log --oneline
  # $ git log --oneline
  # 0eade58 (HEAD, origin/master, origin/HEAD, master) Add b.txt
  # 8984b69 Add README.md

cd "$tmp_dir/$repo_main"
git status
  # $ git status
  # On branch master
  # Your branch is up to date with 'origin/master'.
  #
  # Changes not staged for commit:
  #   (use "git add <file>..." to update what will be committed)
  #   (use "git restore <file>..." to discard changes in working directory)
  #         modified:   depends_on/sandbox-repo-sub (new commits)
  #
  # no changes added to commit (use "git add" and/or "git commit -a")
git diff
  # $ git diff
  # diff --git a/depends_on/sandbox-repo-sub b/depends_on/sandbox-repo-sub
  # index 8984b69..0eade58 160000
  # --- a/depends_on/sandbox-repo-sub
  # +++ b/depends_on/sandbox-repo-sub
  # @@ -1 +1 @@
  # -Subproject commit 8984b6939db28ac7bb181efb3a9564f7405c3ef4
  # +Subproject commit 0eade58d0d7485282b2d2ef45e4046790643d031

git add "depends_on/$repo_sub"
git commit -m 'Update submodule commit'

cd "$tmp_dir/$repo_sub"
git status

#git push
```

#### sandbox-repo-main で commit を指定して更新する。

```bash
tmp_dir="$(mktemp -d)"

cd "$tmp_dir"
repo_url="$(gh repo view "$repo_main" --json sshUrl -q ".sshUrl")"
git clone --recurse-submodules "$repo_url"
  # $ git clone --recurse-submodules "$repo_url"
  # Cloning into 'sandbox-repo-main'...
  # remote: Enumerating objects: 7, done.
  # remote: Counting objects: 100% (7/7), done.
  # remote: Compressing objects: 100% (4/4), done.
  # remote: Total 7 (delta 0), reused 7 (delta 0), pack-reused 0
  # Receiving objects: 100% (7/7), done.
  # Submodule 'depends_on/sandbox-repo-sub' (git@github.com:kumarstack55/sandbox-repo-sub.git) registered for path 'depends_on/sandbox-repo-sub'
  # Cloning into '/tmp/tmp.3MPcH185en/sandbox-repo-main/depends_on/sandbox-repo-sub'...
  # remote: Enumerating objects: 6, done.
  # remote: Counting objects: 100% (6/6), done.
  # remote: Compressing objects: 100% (3/3), done.
  # remote: Total 6 (delta 0), reused 6 (delta 0), pack-reused 0
  # Receiving objects: 100% (6/6), done.
  # Submodule path 'depends_on/sandbox-repo-sub': checked out '8984b6939db28ac7bb181efb3a9564f7405c3ef4'

cd "$tmp_dir/$repo_main/depends_on/$repo_sub"
git status
  # $ git status
  # HEAD detached at 8984b69
  # nothing to commit, working tree clean

cd "$tmp_dir/$repo_main"
git submodule update --remote "depends_on/$repo_sub"
  # $ git submodule update --remote "depends_on/$repo_sub"
  # Submodule path 'depends_on/sandbox-repo-sub': checked out '0eade58d0d7485282b2d2ef45e4046790643d031'
git status
  # $ git status
  # On branch master
  # Your branch is up to date with 'origin/master'.
  #
  # Changes not staged for commit:
  #   (use "git add <file>..." to update what will be committed)
  #   (use "git restore <file>..." to discard changes in working directory)
  #         modified:   depends_on/sandbox-repo-sub (new commits)
  #
  # no changes added to commit (use "git add" and/or "git commit -a")
git diff
  # $ git diff
  # diff --git a/depends_on/sandbox-repo-sub b/depends_on/sandbox-repo-sub
  # index 8984b69..0eade58 160000
  # --- a/depends_on/sandbox-repo-sub
  # +++ b/depends_on/sandbox-repo-sub
  # @@ -1 +1 @@
  # -Subproject commit 8984b6939db28ac7bb181efb3a9564f7405c3ef4
  # +Subproject commit 0eade58d0d7485282b2d2ef45e4046790643d031

git add "depends_on/$repo_sub"
git commit -m 'Update submodule commit'

cd "$tmp_dir/$repo_main/depends_on/$repo_sub"
git status
  # $ git status
  # HEAD detached at 0eade58

cd "$tmp_dir/$repo_main"
#git push
```

### リポジトリ module-main からリポジトリ module-sub を消す。

```bash
tmp_dir="$(mktemp -d)"

cd "$tmp_dir"
repo_url="$(gh repo view "$repo_main" --json sshUrl -q ".sshUrl")"
git clone --recurse-submodules "$repo_url"

cd "$tmp_dir/$repo_main"

git status
git diff --cached
cat .git/config
git submodule status
  # $ git status
  # On branch master
  # Your branch is up to date with 'origin/master'.
  #
  # nothing to commit, working tree clean
  # $ git diff --cached
  # $ cat .git/config
  # [core]
  #         repositoryformatversion = 0
  #         filemode = true
  #         bare = false
  #         logallrefupdates = true
  # [submodule]
  #         active = .
  # [remote "origin"]
  #         url = git@github.com:kumarstack55/sandbox-repo-main.git
  #         fetch = +refs/heads/*:refs/remotes/origin/*
  # [branch "master"]
  #         remote = origin
  #         merge = refs/heads/master
  # [submodule "depends_on/sandbox-repo-sub"]
  #         url = git@github.com:kumarstack55/sandbox-repo-sub.git
  # $ git submodule status
  #  0eade58d0d7485282b2d2ef45e4046790643d031 depends_on/sandbox-repo-sub (heads/master)

git submodule deinit --force "depends_on/$repo_sub"
  # $ git submodule deinit --force "depends_on/$repo_sub"
  # Cleared directory 'depends_on/sandbox-repo-sub'
  # Submodule 'depends_on/sandbox-repo-sub' (git@github.com:kumarstack55/sandbox-repo-sub.git) unregistered for path 'depends_on/sandbox-repo-sub'
git rm -f depends_on/sandbox-repo-sub
  # $ git rm -f depends_on/sandbox-repo-sub
  # rm 'depends_on/sandbox-repo-sub'

git status
git diff --cached
cat .git/config
git submodule status
  # $ git status
  # On branch master
  # Your branch is up to date with 'origin/master'.
  #
  # Changes to be committed:
  #   (use "git restore --staged <file>..." to unstage)
  #         modified:   .gitmodules
  #         deleted:    depends_on/sandbox-repo-sub
  # $ git diff --cached
  # diff --git a/.gitmodules b/.gitmodules
  # index 1714231..e69de29 100644
  # --- a/.gitmodules
  # +++ b/.gitmodules
  # @@ -1,3 +0,0 @@
  # -[submodule "depends_on/sandbox-repo-sub"]
  # -       path = depends_on/sandbox-repo-sub
  # -       url = git@github.com:kumarstack55/sandbox-repo-sub.git
  # diff --git a/depends_on/sandbox-repo-sub b/depends_on/sandbox-repo-sub
  # deleted file mode 160000
  # index 0eade58..0000000
  # --- a/depends_on/sandbox-repo-sub
  # +++ /dev/null
  # @@ -1 +0,0 @@
  # -Subproject commit 0eade58d0d7485282b2d2ef45e4046790643d031
  # $ cat .git/config
  # [core]
  #         repositoryformatversion = 0
  #         filemode = true
  #         bare = false
  #         logallrefupdates = true
  # [submodule]
  #         active = .
  # [remote "origin"]
  #         url = git@github.com:kumarstack55/sandbox-repo-main.git
  #         fetch = +refs/heads/*:refs/remotes/origin/*
  # [branch "master"]
  #         remote = origin
  #         merge = refs/heads/master
  # $ git submodule status
  # $

git commit -m "Remove submodule ${repo_sub}"

#git push
```

## git submodule の機能一覧

```powershell
PS > git --version
git version 2.31.1.windows.1
PS > git submodule -h
usage: git submodule [--quiet] [--cached]
   or: git submodule [--quiet] add [-b <branch>] [-f|--force] [--name <name>] [--reference <repository>] [--] <repository> [<path>]
   or: git submodule [--quiet] status [--cached] [--recursive] [--] [<path>...]
   or: git submodule [--quiet] init [--] [<path>...]
   or: git submodule [--quiet] deinit [-f|--force] (--all| [--] <path>...)
   or: git submodule [--quiet] update [--init] [--remote] [-N|--no-fetch] [-f|--force] [--checkout|--merge|--rebase] [--[no-]recommend-shallow] [--reference <repository>] [--recursive] [--[no-]single-branch] [--] [<path>...]
   or: git submodule [--quiet] set-branch (--default|--branch <branch>) [--] <path>
   or: git submodule [--quiet] set-url [--] <path> <newurl>
   or: git submodule [--quiet] summary [--cached|--files] [--summary-limit <n>] [commit] [--] [<path>...]
   or: git submodule [--quiet] foreach [--recursive] <command>
   or: git submodule [--quiet] sync [--recursive] [--] [<path>...]
   or: git submodule [--quiet] absorbgitdirs [--] [<path>...]
```

## pre-commit をインストールする。

```powershell
poetry add --dev pre-commit
poetry run pre-commit --version
poetry run pre-commit install

function Out-FileNoBom {
    param([String]$LiteralPath, $InputObject)
    $Path = [System.IO.Path]::GetFullPath($LiteralPath)
    [System.IO.File]::WriteAllLines($Path, $InputObject)
}

$Lines = poetry run pre-commit sample-config
Out-FileNoBom -LiteralPath ".pre-commit-config.yaml" -InputObject $Lines
```

https://pre-commit.com/
