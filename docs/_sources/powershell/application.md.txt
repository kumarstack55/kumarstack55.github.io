# PowerShell 応用

## コーディングのルール

こうすると良さそう、というものを書きためておく。

## PowerShell のキーワードや名前の大文字・小文字

* 予約語
    * 小文字にする。
        * `if`
        * `foreach`
        * `while`
        * `switch`
        * `function`
* クラス
    * クラス名
        * `class PascalCaseSuper : PascalCase {`
    * メソッド名
        * `camelCase()`
    * クラスのオブジェクト
        * `$this`
    * プロパティ
        * `$PascalCase`
* 関数
    * コマンドレットの関数名
        * 利用: `ForEach-Object {`
        * 定義: `function Verb-PascalCase {`
    * コマンドレットではない関数名
        * 定義: `Verb-PascalCase {` または
        * 定義: `PascalCase {`
* 変数
    * 定数
        * 宣言:`New-Variable -Name PascalCase -Value 1 -Option Constant`
        * 参照:`$PascalCase`
    * 変数
        * `$PascalCase`
    * 関数のパラメータ
        * `param($PascalCase)`
        * `param([Parameter(Mandatory)][ClassName]$PascalCase)`
        * `param([Parameter(Mandatory)][string]$PascalCase)`
* 値
    * `$null`
    * `$true`
    * `$false`
* 型
    * エイリアスがあればエイリアスを使う。(int, long, string, bool, ...)
        * `[bool]$Enabled`
        * `[string]$Enabled`
    * なければ、定義通りのものにする。
        * `[MessageBox]::Show('Hello')`

* [Types](https://docs.microsoft.com/en-us/powershell/scripting/lang-spec/chapter-04?view=powershell-5.1)
* [about_Functions_Advanced_Parameters](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_functions_advanced_parameters?view=powershell-5.1)

## PowerShell の空行の位置

* クラスとクラスの間: 1行
* クラス
    * クラス定義とプロパティの間: 0行
    * プロパティとメソッドの間: 1行
    * メソッドとメソッドの間: 1行
    * メソッド
        * メソッド定義と `param()` の間: 0行
        * `param()` とコードの間: 0-1行
* クラスとファンクションの間: 1行
* ファンクションの `param()` とコードの間: メソッドと同じ。

## PowerShell の省略記法

* 使わない。

## PowerShell のインデント

* 半角スペースのみを使う。タブは使用しない。
* インデントは 4 つのスペース。

## PowerShell のコメント

```powershell
function Add-Extension {
    <#
        .SYNOPSIS
        Adds a file name extension to a supplied name.

        .DESCRIPTION
        Adds a file name extension to a supplied name.
        Takes any strings for the file name or extension.
    #>
    param ([string]$Name,[string]$Extension = "txt")
```

これは [Examples of Comment-Based Help](https://docs.microsoft.com/en-us/powershell/scripting/developer/help/examples-of-comment-based-help?view=powershell-5.1`) の関数の後方に書くスタイルと異なる。異なるのは、フルセットのヘルプを書く場合は後ろに書いたほうがいいとは思うが、フルセットのヘルプをほぼ書かず、 SYNOPSIS と、さらに書いたとして DESCRIPTION までなので、後方におかずとも十分に可読性があるため。また、少量のドキュメントなら冒頭のほうが可読性が良いように見える。

## TODO

* ディレクトリ構造
* ファイル名
* 型の省略
    * https://stackoverflow.com/a/66265888/12786161

## プロセスの開始時刻を得る。

WMI で得たオブジェクトは ConvertToDateTime で変換できる。

```powershell
$PsoArray = Get-WmiObject win32_process |
    ForEach-Object {
        [pscustomobject]@{
            "CreationDate"=$_.ConvertToDateTime($_.CreationDate)
            "Data"=$_
        }
    }

$PsoArray[0].Data.CreationDate
$PsoArray[0].Data.CreationDate.GetType()
$PsoArray[0].CreationDate
$PsoArray[0].CreationDate.GetType()
```

```console
PS > $PsoArray[0].Data.CreationDate
20221015172823.192768+540
PS > $PsoArray[0].Data.CreationDate.GetType()

IsPublic IsSerial Name                                     BaseType
-------- -------- ----                                     --------
True     True     String                                   System.Object


PS > $PsoArray[0].CreationDate

2022年10月15日 17:28:23


PS > $PsoArray[0].CreationDate.GetType()

IsPublic IsSerial Name                                     BaseType
-------- -------- ----                                     --------
True     True     DateTime                                 System.ValueType
```

* https://learn.microsoft.com/en-us/powershell/scripting/learn/ps101/07-working-with-wmi
* https://learn.microsoft.com/en-us/windows/win32/cimwin32prov/win32-process

## 最も最近に作られた Python プロセスを終了する。

```powershell
$ProcessArray = Get-WmiObject win32_process |
    Where-Object { $_.ProcessName -match 'python\.exe' } |
    Sort-Object -Property CreationDate |
    ForEach-Object {
        [pscustomobject]@{
            "ProcessId"=$_.ProcessId
            "CreationDate"=$_.ConvertToDateTime($_.CreationDate)
            "ProcessName"=$_.ProcessName
            "CommandLine"=$_.CommandLine
            "Data"=$_
        }
    }

$ProcessArray[-1]
Stop-Process $ProcessArray[-1].ProcessId
```
