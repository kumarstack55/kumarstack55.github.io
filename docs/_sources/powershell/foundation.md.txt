# PowerShell 基礎

## ハッシュテーブルでクラスのオブジェクトを同一とするか制御する。

`Equals()` をオーバーライドする。

ただし、 `-eq` の動作も変わるため、参照が異なることと、同値であることの区別がつかなくなる。

```powershell
# ハッシュテーブルのキーとして登録するとき、
# プロパティが同一であっても、異なるキーとして登録するクラスを定義する。
class MyRecordA {
    hidden [string] $Property1
    hidden [string] $Property2
    MyRecordA([string] $Property1, [string] $Property2) {
        $this.Property1 = $Property1
        $this.Property2 = $Property2
    }
}

# ハッシュテーブルのキーとして登録するとき、
# プロパティが同一ならば、同一キーとして登録するクラスを定義する。
class MyRecordB {
    hidden [string] $Property1
    hidden [string] $Property2
    MyRecordB([string] $Property1, [string] $Property2) {
        $this.Property1 = $Property1
        $this.Property2 = $Property2
    }
    [int] GetHashCode() {
        $HashCode = [int]::MaxValue
        $this |
            Get-Member -MemberType Property |
            ForEach-Object {
                $HashCode -= $this.$($_.Name).GetHashCode()
            }
        return $HashCode
    }
    [bool] Equals([System.Object] $obj) {
        if ($obj -isnot [MyRecordB]) {
            return $false
        }
        $That = [MyRecordB] $obj
        $PropertyNames = $this | Get-Member -MemberType Property
        foreach ($Name in $PropertyNames) {
            if ($this.$($_.Name) -cne $That.$($_.Name)) {
                return $false
            }
        }
        return $true
    }
}

$HashTableA = [hashtable]::new()
$a1 = [MyRecordA]::new("x", "y")
$a2 = [MyRecordA]::new("x", "y")
$HashTableA[$a1] = 1
$HashTableA[$a2] = 2
$HashTableA
    # Name                           Value
    # ----                           -----
    # MyRecordA                      1
    # MyRecordA                      2

$HashTableB = [hashtable]::new()
$b1 = [MyRecordB]::new("x", "y")
$b2 = [MyRecordB]::new("x", "y")
$HashTableB[$b1] = 1
$HashTableB[$b2] = 2
$HashTableB
    # Name                           Value
    # ----                           -----
    # MyRecordB                      2
```


## 1次元配列を作る。

### 下限が0の1次元配列を作る。

```powershell
# 要素数
$Length = 3

$Array = [System.Array]::CreateInstance([int], $Length)
$Array.Count            # --> 3
$Array.Length           # --> 3
$Array.GetLowerBound(0) # --> 0
$Array.GetUpperBound(0) # --> 2

$Array[0] = 100
$Array[1] = 101
$Array[2] = 102

$Array[0]   # --> 100
```

### 下限が1の1次元配列を作る。

```powershell
# 要素数
$LengthArray = [System.Array]::CreateInstance([int], 1)
$LengthArray[0] = 3

# 下限
$LowerBoundArray = [System.Array]::CreateInstance([int], 1)
$LowerBoundArray[0] = 1

$Array = [System.Array]::CreateInstance([int], $LengthArray, $LowerBoundArray)
$Array.Count            # --> 3
$Array.Length           # --> 3
$Array.GetLowerBound(0) # --> 1
$Array.GetUpperBound(0) # --> 3

# このアクセス方法では例外が発生し、失敗する。
$Array[1] = 101
    # --> 操作はランタイムを不安定にする可能性があります。

$Array.Item(1) = 101
$Array.Item(2) = 102
$Array.Item(3) = 103

$Array.Item(1)  # --> 101
```

## 2次元配列を作る。

### 下限が0の2次元配列を作る。

```powershell
# ランク
$Rank = 2

# 要素数
$LengthArray = [System.Array]::CreateInstance([int], $Rank)
$LengthArray[0] = 3
$LengthArray[1] = 4

$Array = [System.Array]::CreateInstance([int], $LengthArray)
$Array.Count            # --> 12
$Array.Length           # --> 12
$Array.GetLowerBound(0) # --> 0
$Array.GetUpperBound(0) # --> 2

$Array[0, 0] = 100
$Array[0, 1] = 101
$Array[0, 2] = 102

$Array[0, 0]    # --> 101
```

### 下限が1の2次元配列を作る。

```powershell
# ランク
$Rank = 2

# 要素数
$LengthArray = [System.Array]::CreateInstance([int], $Rank)
$LengthArray[0] = 3
$LengthArray[1] = 4

# 下限
$LowerBoundArray = [System.Array]::CreateInstance([int], $Rank)
$LowerBoundArray[0] = 1

$Array = [System.Array]::CreateInstance([int], $LengthArray, $LowerBoundArray)
$Array.Count            # --> 12
$Array.Length           # --> 12
$Array.GetLowerBound(0) # --> 1
$Array.GetUpperBound(0) # --> 3

$Array[1, 1] = 101
$Array[1, 2] = 102
$Array[1, 3] = 103

$Array[1, 1]    # --> 101
```

## 独自クラスのリストをCSV形式に変換する。

* `ConvertTo-CSV` で変換できるようにするため `PSCustomObject` に変換する。
* 変換の際にキーの順序を維持できるようにするため、 `OrderedDictionary` を利用する。
    * `[ordered] @{}` としても `OrderedDictionary` のオブジェクトを作れるが、この例では利用していない。

```powershell
class MyRecord {
    hidden [int] $Property1
    hidden [int] $Property2
    MyRecord([int] $Property1, [int] $Property2) {
        $this.Property1 = $Property1
        $this.Property2 = $Property2
    }
    [pscustomobject] ConvertToPSCustomObject() {
        $Dictionary = [System.Collections.Specialized.OrderedDictionary]::new()
        $Dictionary.Add('Property1', $this.Property1)
        $Dictionary.Add('Property2', $this.Property2)
        $PSCustomObject = [pscustomobject] $Dictionary
        return $PSCustomObject
    }
}

class MyRecordRepository {
    hidden [System.Collections.Generic.List[MyRecord]] $RecordList
    MyRecordRepository() {
        $this.RecordList = [System.Collections.Generic.List[MyRecord]]::new()
    }
    Add([MyRecord] $Record) {
        $this.RecordList.Add($Record)
    }
    [System.Collections.Generic.List[pscustomobject]] ConvertToPSCustomObjectList() {
        $List = [System.Collections.Generic.List[pscustomobject]]::new()
        foreach ($Record in $this.RecordList) {
            $PSCustomObject = $Record.ConvertToPSCustomObject()
            $List.Add($PSCustomObject)
        }
        return $List
    }
}

$Record1 = [MyRecord]::new(11, 21)
$Record2 = [MyRecord]::new(12, 22)

$RecordRepository = [MyRecordRepository]::new()
$RecordRepository.Add($Record1)
$RecordRepository.Add($Record2)

$RecordRepository.ConvertToPSCustomObjectList()
    # PS > $RecordRepository.ConvertToPSCustomObjectList()
    #
    # Property1 Property2
    # --------- ---------
    #        11        21
    #        12        22

$RecordRepository.ConvertToPSCustomObjectList() | ConvertTo-Csv -NoTypeInformation
    # PS > $RecordRepository.ConvertToPSCustomObjectList() | ConvertTo-Csv -NoTypeInformation
    # "Property1","Property2"
    # "11","21"
    # "12","22"
```

## インストールしたモジュールの一覧を得る。

```powershell
Get-Module
Get-InstalledModule
```

## PAUSE する。

```powershell
Read-Host -Prompt "Press Enter to continue"
```

## IPアドレスを得る。

```powershell
Get-NetIPAddress
```

## 一定間隔のスリープ後、繰り返し実行する。

```powershell
class IntervalTimerRecipient {
    notify([IntervalTimer]$IntervalTimer) {
        throw
    }
}

class IntervalTimer {
    [int]$Milliseconds
    [System.Collections.ArrayList]$Recipients
    [bool]$Enabled
        IntervalTimer([int]$Milliseconds) {
        $this.Milliseconds = $Milliseconds
        $this.Recipients = New-Object System.Collections.ArrayList
        $this.Enabled = $false
    }
    add($Recipient) {
        $this.Recipients.add($Recipient)
    }
    start() {
        $this.Enabled = $true
        while ($this.Enabled) {
            $this.Recipients |
                ForEach-Object {
                    $_.notify($this)
                }
            Start-Sleep -Milliseconds $this.Milliseconds
        }
    }
    stop() {
        $this.Enabled = $false
    }
}

class Writer : IntervalTimerRecipient {
    notify([IntervalTimer]$IntervalTimer) {
        write-host "x"
    }
}

$Milliseconds = 1000
$IntervalTimer = [IntervalTimer]::new($Milliseconds)
$Recipient = [Writer]::new()
$IntervalTimer.add($Recipient)
$IntervalTimer.start()
```

## 参考: ネットワーク関連のファンクション一覧

```powershell
Get-Net<Tab><Tab>
```

```console
PS > Get-Net
Get-Net6to4Configuration
Get-NetAdapter
Get-NetAdapterAdvancedProperty
Get-NetAdapterBinding
Get-NetAdapterChecksumOffload
Get-NetAdapterDataPathConfiguration
Get-NetAdapterEncapsulatedPacketTaskOffload
Get-NetAdapterHardwareInfo
Get-NetAdapterIPsecOffload
Get-NetAdapterLso
Get-NetAdapterPacketDirect
Get-NetAdapterPowerManagement
Get-NetAdapterQos
Get-NetAdapterRdma
Get-NetAdapterRsc
Get-NetAdapterRss
Get-NetAdapterSriov
Get-NetAdapterSriovVf
Get-NetAdapterStatistics
Get-NetAdapterUso
Get-NetAdapterVmq
Get-NetAdapterVMQQueue
Get-NetAdapterVPort
Get-NetCompartment
Get-NetConnectionProfile
Get-NetDnsTransitionConfiguration
Get-NetDnsTransitionMonitoring
Get-NetEventNetworkAdapter
Get-NetEventPacketCaptureProvider
Get-NetEventProvider
Get-NetEventSession
Get-NetEventVFPProvider
Get-NetEventVmNetworkAdapter
Get-NetEventVmSwitch
Get-NetEventVmSwitchProvider
Get-NetEventWFPCaptureProvider
Get-NetFirewallAddressFilter
Get-NetFirewallApplicationFilter
Get-NetFirewallDynamicKeywordAddress
Get-NetFirewallInterfaceFilter
Get-NetFirewallInterfaceTypeFilter
Get-NetFirewallPortFilter
Get-NetFirewallProfile
Get-NetFirewallRule
Get-NetFirewallSecurityFilter
Get-NetFirewallServiceFilter
Get-NetFirewallSetting
Get-NetIPAddress
Get-NetIPConfiguration
Get-NetIPHttpsConfiguration
Get-NetIPHttpsState
Get-NetIPInterface
Get-NetIPsecDospSetting
Get-NetIPsecMainModeCryptoSet
Get-NetIPsecMainModeRule
Get-NetIPsecMainModeSA
Get-NetIPsecPhase1AuthSet
Get-NetIPsecPhase2AuthSet
Get-NetIPsecQuickModeCryptoSet
Get-NetIPsecQuickModeSA
Get-NetIPsecRule
Get-NetIPv4Protocol
Get-NetIPv6Protocol
Get-NetIsatapConfiguration
Get-NetLbfoTeam
Get-NetLbfoTeamMember
Get-NetLbfoTeamNic
Get-NetNat
Get-NetNatExternalAddress
Get-NetNatGlobal
Get-NetNatSession
Get-NetNatStaticMapping
Get-NetNatTransitionConfiguration
Get-NetNatTransitionMonitoring
Get-NetNeighbor
Get-NetOffloadGlobalSetting
Get-NetPrefixPolicy
Get-NetQosPolicy
Get-NetRoute
Get-NetSwitchTeam
Get-NetSwitchTeamMember
Get-NetTCPConnection
Get-NetTCPSetting
Get-NetTeredoConfiguration
Get-NetTeredoState
Get-NetTransportFilter
Get-NetUDPEndpoint
Get-NetUDPSetting
Get-NetView
Get-NetworkSwitchEthernetPort
Get-NetworkSwitchFeature
Get-NetworkSwitchGlobalData
Get-NetworkSwitchVlan
```
