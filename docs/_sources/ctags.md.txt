# Ctags

## e-ctags

## u-ctags

### 公式ドキュメント

* https://github.com/universal-ctags/ctags
* https://docs.ctags.io/en/latest/index.html

読み込まれる設定ファイルのパスは ctags, e-ctags と互換性がないため、
注意する必要がある。

### 指定言語の kinds を得る。

kinds があれば出力される。

```console
PS > ctags --list-kinds=markdown
c  chapsters
s  sections
S  subsections
t  subsubsections
T  level 4 subsections
u  level 5 subsections
```

kinds がなければ失敗する。

```console
PS > ctags --list-kinds=xyz
ctags.exe: Unknown language "xyz" in "list-kinds" option
```

### ctags --list-languages

```console
PS > ctags --list-languages
Abaqus
Abc
Ada
AnsiblePlaybook
Ant
Asciidoc
Asm
Asp
Autoconf
AutoIt
Automake
Awk
Basic
BETA
BibTeX
C
C#
C++
Clojure
CMake
Cobol
CobolFree
CobolVariable
CPreProcessor
CSS
Ctags
CUDA
D
DBusIntrospect
Diff
DosBatch
DTD
DTS
Eiffel
Elixir
Elm
EmacsLisp
Erlang
Falcon
Flex
Fortran
FunctionParameters
Fypp
Gdbinit
Glade
Go
Haskell
Haxe
HTML
Iniconf
Inko
ITcl
Java
JavaProperties
JavaScript
JSON
Julia
Kconfig
Kotlin
LdScript
Lisp
LiterateHaskell
Lua
M4
Make
Man
Markdown
MatLab
Maven2
Meson
Moose
Myrddin
NSIS
ObjectiveC
OCaml
OldC [disabled]
OldC++ [disabled]
Pascal
Passwd
Perl
Perl6
PHP
PlistXML
Pod
PowerShell
Protobuf
PuppetManifest
Python
PythonLoggingConfig
QemuHX
QtMoc
R
R6Class
RelaxNG
ReStructuredText
REXX
Robot
RpmSpec
RSpec
Ruby
Rust
S4Class
Scheme
SCSS
Sh
SLang
SML
SQL
SVG
SystemdUnit
SystemTap
SystemVerilog
Tcl
TclOO
Tex
TeXBeamer
TTCN
Txt2tags
TypeScript
Unknown [disabled]
Varlink
Vera
Verilog
VHDL
Vim
WindRes
XML
XSLT
YACC
Yaml
YumRepo
Zephir
```

### ctags --list-kinds

```console
PS > ctags --list-kinds=markdown
c  chapsters
s  sections
S  subsections
t  subsubsections
T  level 4 subsections
u  level 5 subsections
```

```console
PS > ctags --list-kinds=python
c  classes
f  functions
m  class members
v  variables
I  name referring a module defined in other file
i  modules
x  name referring a class/variable/function/module defined in other module
z  function parameters [off]
l  local variables [off]
```

```console
PS > ctags --list-kinds=powershell
f  functions
v  variables
```

### 指定言語のマップを得る。

```console
PS > ctags --list-maps=markdown
Markdown *.md *.markdown
```

```console
PS > ctags --list-maps=python
Python   *.py *.pyx *.pxd *.pxi *.scons *.wsgi
```

```console
PS > ctags --list-maps=powershell
PowerShell *.ps1 *.psm1
```

### tags を生成する。

#### C++

```cpp
#include <iostream>

enum enum1 {
  enum1member1,
  enum1member2,
};

enum enum2 {
  enum2member1,
  enum2member2,
};

void function1() {
}

void function2() {
}

class Class1 {
  void class1method1() {
  }
  void class1method2() {
  }
};

class Class2 : Class1 {
  void class1method1() {
  }
  void class1method2() {
  }
  void class2method1() {
  }
  void class2method2() {
  }
};

int main(int argc, char **argv)
{
    std::cout << "hello, world!" << std::endl;
    return 0;
}
```

```tags
!_TAG_EXTRA_DESCRIPTION anonymous       /Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION fileScope       /Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION pseudo  /Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION subparser       /Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION epoch   /the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION file    /File-restricted scoping/
!_TAG_FIELD_DESCRIPTION input   /input file/
!_TAG_FIELD_DESCRIPTION name    /tag name/
!_TAG_FIELD_DESCRIPTION pattern /pattern/
!_TAG_FIELD_DESCRIPTION typeref /Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++     name    /aliased names/
!_TAG_FILE_FORMAT       2       /extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED       1       /0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C++      c,class /classes/
!_TAG_KIND_DESCRIPTION!C++      d,macro /macro definitions/
!_TAG_KIND_DESCRIPTION!C++      e,enumerator    /enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++      f,function      /function definitions/
!_TAG_KIND_DESCRIPTION!C++      g,enum  /enumeration names/
!_TAG_KIND_DESCRIPTION!C++      h,header        /included header files/
!_TAG_KIND_DESCRIPTION!C++      m,member        /class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++      n,namespace     /namespaces/
!_TAG_KIND_DESCRIPTION!C++      s,struct        /structure names/
!_TAG_KIND_DESCRIPTION!C++      t,typedef       /typedefs/
!_TAG_KIND_DESCRIPTION!C++      u,union /union names/
!_TAG_KIND_DESCRIPTION!C++      v,variable      /variable definitions/
!_TAG_OUTPUT_EXCMD      mixed   /number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP    slash   /slash or backslash/
!_TAG_OUTPUT_MODE       u-ctags /u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT      96      /0 for no limit/
!_TAG_PROC_CWD  /home/kumarstack55/     //
!_TAG_PROGRAM_AUTHOR    Universal Ctags Team    //
!_TAG_PROGRAM_NAME      Universal Ctags /Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL       https://ctags.io/       /official site/
!_TAG_PROGRAM_VERSION   5.9.0   /60cc214b/
!_TAG_ROLE_DESCRIPTION!C++!header       local   /local header/
!_TAG_ROLE_DESCRIPTION!C++!header       system  /system header/
!_TAG_ROLE_DESCRIPTION!C++!macro        undef   /undefined/
Class1  a.cpp   /^class Class1 {$/;"    c       file:
Class2  a.cpp   /^class Class2 : Class1 {$/;"   c       file:
class1method1   a.cpp   /^  void class1method1() {$/;"  f       class:Class1    typeref:typename:void   file:
class1method1   a.cpp   /^  void class1method1() {$/;"  f       class:Class2    typeref:typename:void   file:
class1method2   a.cpp   /^  void class1method2() {$/;"  f       class:Class1    typeref:typename:void   file:
class1method2   a.cpp   /^  void class1method2() {$/;"  f       class:Class2    typeref:typename:void   file:
class2method1   a.cpp   /^  void class2method1() {$/;"  f       class:Class2    typeref:typename:void   file:
class2method2   a.cpp   /^  void class2method2() {$/;"  f       class:Class2    typeref:typename:void   file:
enum1   a.cpp   /^enum enum1 {$/;"      g       file:
enum1member1    a.cpp   /^  enum1member1,$/;"   e       enum:enum1      file:
enum1member2    a.cpp   /^  enum1member2,$/;"   e       enum:enum1      file:
enum2   a.cpp   /^enum enum2 {$/;"      g       file:
enum2member1    a.cpp   /^  enum2member1,$/;"   e       enum:enum2      file:
enum2member2    a.cpp   /^  enum2member2,$/;"   e       enum:enum2      file:
function1       a.cpp   /^void function1() {$/;"        f       typeref:typename:void
function2       a.cpp   /^void function2() {$/;"        f       typeref:typename:void
main    a.cpp   /^int main(int argc, char **argv)$/;"   f       typeref:typename:int
```

#### Markdown

```console
PS > Get-Content .\a.md
# head1
## head2
### head3
#### head4
##### head5
###### head6

body
```

```console
PS > ctags.exe .\a.md
```

```console
PS > Get-Content .\tags
!_TAG_FILE_FORMAT       2       /extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED       1       /0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD      mixed   /number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP    slash   /slash or backslash/
!_TAG_OUTPUT_MODE       u-ctags /u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT      96      /0 for no limit/
!_TAG_PROC_CWD  C:/tmp/ //
!_TAG_PROGRAM_AUTHOR    Universal Ctags Team    //
!_TAG_PROGRAM_NAME      Universal Ctags /Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL       https://ctags.io/       /official site/
!_TAG_PROGRAM_VERSION   5.9.0   /3185b289/
head1   ./a.md  /^# head1$/;"   c
head2   ./a.md  /^## head2$/;"  s       chapter:head1
head3   ./a.md  /^### head3$/;" S       section:head1""head2
head4   ./a.md  /^#### head4$/;"        t       subsection:head1""head2""head3
head5   ./a.md  /^##### head5$/;"       T       subsubsection:head1""head2""head3""head4
head6   ./a.md  /^###### head6$/;"      u       l4subsection:head1""head2""head3""head4""head5
```

#### Python

```console
PS > Get-Content .\a.py
def f():
    pass


def g():
    pass


class c(object):
    def m1(self):
        pass

    def m2(self):
        pass
```

```console
PS > ctags.exe .\a.py
```

```console
PS > cat .\tags
!_TAG_FILE_FORMAT       2       /extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED       1       /0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD      mixed   /number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP    slash   /slash or backslash/
!_TAG_OUTPUT_MODE       u-ctags /u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT      96      /0 for no limit/
!_TAG_PROC_CWD  C:/tmp/ //
!_TAG_PROGRAM_AUTHOR    Universal Ctags Team    //
!_TAG_PROGRAM_NAME      Universal Ctags /Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL       https://ctags.io/       /official site/
!_TAG_PROGRAM_VERSION   5.9.0   /3185b289/
c       ./a.py  /^class c(object):$/;"  c
f       ./a.py  /^def f():$/;"  f
g       ./a.py  /^def g():$/;"  f
m1      ./a.py  /^    def m1(self):$/;" m       class:c
m2      ./a.py  /^    def m2(self):$/;" m       class:c
PS >
```

### ctags --help

```console
PS > ctags --help
Universal Ctags 5.9.0(3185b289), Copyright (C) 2015 Universal Ctags Team
Universal Ctags is derived from Exuberant Ctags.
Exuberant Ctags 5.8, Copyright (C) 1996-2009 Darren Hiebert
  Compiled: Apr  2 2021, 01:06:11
  URL: https://ctags.io/
  Optional compiled features: +win32, +wildcards, +regex, +internal-sort, +unix-path-separator, +iconv, +option-directory, +xpath, +json, +interactive, +yaml, +case-insensitive-filenames, +packcc

Usage: ctags.exe [options] [file(s)]

Input/Output Options
  --exclude=<pattern>
       Exclude files and directories matching <pattern>.
       See also --exclude-exception option.
  --exclude-exception=<pattern>
      Don't exclude files and directories matching <pattern> even if
      they match the pattern specified with --exclude option.
  --filter[=(yes|no)]
       Behave as a filter, reading file names from standard input and
       writing tags to standard output [no].
  --filter-terminator=<string>
       Specify <string> to print to stdout following the tags for each file
       parsed when --filter is enabled.
  --links[=(yes|no)]
       Indicate whether symbolic links should be followed [yes].
  --maxdepth=<N>
       Specify maximum recursion depth.
  --recurse[=(yes|no)]
       Recurse into directories supplied on command line [no].
  -R   Equivalent to --recurse.
  -L <file>
       A list of input file names is read from the specified <file>.
       If specified as "-", then standard input is read.
  --append[=(yes|no)]
       Should tags should be appended to existing tag file [no]?
  -a   Append the tags to an existing tag file.
  -f <tagfile>
       Write tags to specified <tagfile>. Value of "-" writes tags to stdout
       ["tags"; or "TAGS" when -e supplied].
  -o   Alternative for -f.

Output Format Options
  --format=(1|2)
       Force output of specified tag file format [2].
  --output-format=(u-ctags|e-ctags|etags|xref|json)
      Specify the output format. [u-ctags]
  -e   Output tag file for use with Emacs.
  -x   Print a tabular cross reference file to standard output.
  --sort=(yes|no|foldcase)
       Should tags be sorted (optionally ignoring case) [yes]?
  -u   Equivalent to --sort=no.
  --etags-include=<file>
       Include reference to <file> in Emacs-style tag file (requires -e).
  --input-encoding=<encoding>
       Specify <encoding> of all input files.
  --input-encoding-<LANG>=<encoding>
       Specify <encoding> of the <LANG> input files.
  --output-encoding=<encoding>
       The <encoding> to write the tag file in. Defaults to UTF-8 if --input-encoding
       is specified, otherwise no conversion is performed.

Language Selection and Mapping Options
  --language-force=(<language>|auto)
       Force all files to be interpreted using specified <language>.
  --languages=[+|-](<list>|all)
       Restrict files scanned for tags to those mapped to languages
       specified in the comma-separated <list>. The list can contain any
       built-in or user-defined language [all].
  --alias-<LANG>=[+|-](<pattern>|default)
       Add a <pattern> detecting a name, can be used as an alternative name
       for <LANG>.
  --guess-language-eagerly
       Guess the language of input file more eagerly
       (but taking longer time for guessing):
       o shebang, even if the input file is not executable,
       o emacs mode specification at the beginning and end of input file, and
       o vim syntax specification at the end of input file.
  -G   Equivalent to --guess-language-eagerly.
  --langmap=<map>[,<map>[...]]
       Override default mapping of language to input file extension.
       e.g. --langmap=c:.c.x,java:+.j,make:([Mm]akefile).mak
  --map-<LANG>=[+|-]<extension>|<pattern>
       Set, add(+) or remove(-) the map for <LANG>.
       Unlike --langmap, this doesn't take a list; only one file name <pattern>
       or one file <extension> can be specified at once.
       Unlike --langmap the change with this option affects mapping of <LANG> only.

Tags File Contents Options
  --excmd=(number|pattern|mix|combine)
       Uses the specified type of EX command to locate tags [mix].
  -n   Equivalent to --excmd=number.
  -N   Equivalent to --excmd=pattern.
  --extras=[+|-][<flags>|*]
       Include extra tag entries for selected information (<flags>: "fFgpqrs") [F].
  --extras-(<LANG>|all)=[+|-][<flags>|*]
       Include <LANG> own extra tag entries for selected information
       (<flags>: see the output of --list-extras=<LANG> option).
  --fields=[+|-][<flags>|*]
       Include selected extension fields (<flags>: "aCeEfFikKlmnNpPrRsStxzZ") [fks].
  --fields-(<LANG>|all)=[+|-][<flags>|*]
       Include selected <LANG> own extension fields
       (<flags>: see the output of --list-fields=<LANG> option).
  --kinds-(<LANG>|all)=[+|-](<kinds>|*)
       Enable/disable tag <kinds> for language <LANG>.
  --pattern-length-limit=<N>
      Cutoff patterns of tag entries after <N> characters. Disable by setting to 0. [96]
  --pseudo-tags=[+|-](<pseudo-tag>|*)
       Enable/disable emitting pseudo tag named <pseudo-tag>.
       if '*' is given, enable emitting all pseudo tags.
  --put-field-prefix
       Put "UCTAGS" as prefix for the name of fields newly introduced in
       universal-ctags.
  --roles-(<LANG>|all).(<kind>|all)=[+|-][<roles>|*]
       Enable/disable tag roles for kinds of language <LANG>.
  --tag-relative=(yes|no|always|never)
       Should paths be relative to location of tag file [no; yes when -e]?
       always: be relative even if input files are passed in with absolute paths
       never:  be absolute even if input files are passed in with relative paths
  --use-slash-as-filename-separator[=(yes|no)]
       Use slash as filename separator [yes] for u-ctags output format.
  -B   Use backward searching patterns (?...?).
  -F   Use forward searching patterns (/.../; default).

Option File Options
  --options=<pathname>
       Specify file (or directory) <pathname> from which command line options should be read.
  --options-maybe=<pathname>
       Do the same as --options but this doesn't make an error for non-existing file.
  --optlib-dir=[+]<directory>
       Add or set <directory> to optlib search path.

optlib Options
  --kinddef-<LANG>=<letter>,<name>,<description>
       Define new kind for <LANG>.
  --langdef=<name>
       Define a new language to be parsed with regular expressions.
  --mline-regex-<LANG>=/<line_pattern>/<name_pattern>/<kind-spec>/[<flags>]
       Define multiline regular expression for locating tags in specific language.
  --regex-<LANG>=/<line_pattern>/<name_pattern>/<kind-spec>/[<flags>]
       Define single-line regular expression for locating tags in specific language.

Language Specific Options
  --if0[=(yes|no)]
       Should code within #if 0 conditional branches be parsed [no]?
  --line-directives[=(yes|no)]
       Should '#line' directives be processed [no]?
  -D <macro>=<definition>
       (CPreProcessor) Give <definition> for <macro>.
  -h (<list>|default)
       Specify a <list> of file extensions to be treated as include files
       [".h.H.hh.hpp.hxx.h++.inc.def"].
  -I [+|-]<list>|@<file>
       A <list> of tokens to be specially handled is read from either the
       command line or the specified <file>.
  --param-<LANG>:<name>=<argument>
       Set <LANG> specific parameter. Available parameters can be listed with --list-params.

Listing Options
  --list-aliases[=(<language>|all)]
       Output list of alias patterns.
  --list-excludes
       Output list of exclude patterns for excluding files/directories.
  --list-extras[=(<language>|all)]
       Output list of extra tag flags.
  --list-features
       Output list of compiled features.
  --list-fields[=(<language>|all)]
       Output list of fields.
  --list-kinds[=(<language>|all)]
       Output a list of all tag kinds for specified <language> or all.
  --list-kinds-full[=(<language>|all)]
       List the details of all tag kinds for specified <language> or all
       For each line, associated language name is printed when "all" is
       specified as language.
  --list-languages
       Output list of supported languages.
  --list-map-extensions[=(<language>|all)]
       Output list of language extensions in mapping.
  --list-map-patterns[=(<language>|all)]
       Output list of language patterns in mapping.
  --list-maps[=(<language>|all)]
       Output list of language mappings (both extensions and patterns).
  --list-mline-regex-flags
       Output list of flags which can be used in a multiline regex parser definition.
  --list-params[=(<language>|all)]
       Output list of language parameters. This works with --machinable.
  --list-pseudo-tags
       Output list of pseudo tags.
  --list-regex-flags
       Output list of flags which can be used in a regex parser definition.
  --list-roles[=(<language>|all)[.(<kindspecs>|*)]]
       Output list of all roles of tag kind(s) specified for <language>.
       Both letters and names can be used in <kindspecs>.
       e.g. --list-roles=C.{header}d
  --list-subparsers[=(<baselang>|all)]
       Output list of subparsers for the base language.
  --machinable[=(yes|no)]
       Use tab separated representation in --list-* option output. [no]
       --list-{aliases,extras,features,fields,kind-full,langdef-flags,params,
       pseudo-tags,regex-flags,roles,subparsers} support this option.
       Suitable for scripting. Specify before --list-* option.
  --with-list-header[=(yes|no)]
       Prepend the column descriptions in --list- output. [yes]
       --list-{aliases,extras,features,fields,kind-full,langdef-flags,params,
       pseudo-tags,regex-flags,roles,subparsers} support this option.
       Specify before --list-* option.

Miscellaneous Options
  --help
       Print this option summary.
  -?   Print this option summary.
  --help-full
       Print this option summary including experimental features.
  --license
       Print details of software license.
  --print-language
       Don't make tags file but just print the guessed language name for
       input file.
  --quiet[=(yes|no)]
       Don't print NOTICE class messages [no].
  --totals[=(yes|no|extra)]
       Print statistics about input and tag files [no].
  --verbose[=(yes|no)]
       Enable verbose messages describing actions on each input file.
  --version
       Print version identifier to standard output.
  -V   Equivalent to --verbose.
```
