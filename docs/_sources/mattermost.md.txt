# Mattermost

## Mattermost をインストールする。

```powershell
docker run --name mattermost-preview -d --publish 8065:8065 mattermost/mattermost-preview
```

参考資料:

* https://mattermost.com/deploy/

## Incoming Webhook

### Incoming Webhook の URL を作る。

* Integrations
    * Add Incoming Webhook
        * Title: incoming-webhook1
        * Description:
        * Channel: channel1
        * [x] Lock to this channel

### 指定チャネルに書く。

```bash
# WSL2

incoming_webhook_url="http://localhost:8065/hooks/7uxs4k5rp3bkfnypmnztsdjdmc"

curl -i -X POST --data-urlencode 'payload={"text": "Hello, this is some text\nThis is more text. :tada:"}' "$incoming_webhook_url"
```

参考資料:

* https://docs.mattermost.com/developer/webhooks-incoming.html#incoming-webhooks

### ユーザ名を指定して指定チャネルに書く。

* System Console
    * Integrations
        * Integration Management
            * Enable integrations to override usernames
                * (o) true
            * Save

```bash
# WSL2

curl -i -X POST -H 'Content-Type: application/json' -d '
{
  "username": "test-automation",
  "icon_url": "https://mattermost.org/wp-content/uploads/2016/04/icon.png",
  "text": "#### Test results for July 27th, 2017\n<!channel> please review failed tests.\n
  | Component  | Tests Run   | Tests Failed                                   |
  |:-----------|:-----------:|:-----------------------------------------------|
  | Server     | 948         | :white_check_mark: 0                           |
  | Web Client | 123         | :warning: 2 [(see details)](http://linktologs) |
  | iOS Client | 78          | :warning: 3 [(see details)](http://linktologs) |
  "
  }
' "$incoming_webhook_url"

```

* https://docs.mattermost.com/developer/webhooks-incoming.html

### アタッチメントを書く。

```bash
# WSL2

curl -i -X POST -H 'Content-Type: application/json' -d '
  {
    "attachments": [
      {
        "fallback": "test",
        "color": "#FF8000",
        "pretext": "This is optional pretext that shows above the attachment.",
        "text": "This is the text of the attachment. It should appear just above an image of the Mattermost logo. The left border of the attachment should be colored orange, and below the image it should include additional fields that are formatted in columns. At the top of the attachment, there should be an author name followed by a bolded title. Both the author name and the title should be hyperlinks.",
        "author_name": "Mattermost",
        "author_icon": "https://mattermost.com/wp-content/uploads/2022/02/icon_WS.png",
        "author_link": "https://mattermost.org/",
        "title": "Example Attachment",
        "title_link": "https://developers.mattermost.com/integrate/admin-guide/admin-message-attachments/",
        "fields": [
          {
            "short":false,
            "title":"Long Field",
            "value":"Testing with a very long piece of text that will take up the whole width of the table. And then some more text to make it extra long."
          },
          {
            "short":true,
            "title":"Column One",
            "value":"Testing"
          },
          {
            "short":true,
            "title":"Column Two",
            "value":"Testing"
          },
          {
            "short":false,
            "title":"Another Field",
            "value":"Testing"
          }
        ],
        "image_url": "https://mattermost.com/wp-content/uploads/2022/02/icon_WS.png"
      }
    ]
  }' "$incoming_webhook_url"
```

参考資料:

* https://developers.mattermost.com/integrate/admin-guide/admin-message-attachments/#example-message-attachment

### TODO: 画像を添付して書く。

(要アクセストークン)

参考資料:

* https://mattermost.com/blog/mattermost-integrations-mattermost-api/
* https://vaelor.github.io/python-mattermost-driver/endpoints.html#module-mattermostdriver.endpoints.files
* https://www.d-make.co.jp/blog/2021/01/28/mattermost-api-%E3%81%A7%E3%83%A1%E3%83%83%E3%82%BB%E3%83%BC%E3%82%B8%E6%8A%95%E7%A8%BF%E3%82%92%E8%A9%A6%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9F/

### TODO: 指定スレッドに返信する。

## Outgoing Webhook

### Outgoing Webhook を作り、コールバックを実装する。

チャンネル `channel1` にキーワード `#bot1` を含むメッセージを書き込んだ時、
Mattermost が `http://172.30.101.213:10080/callback` に要求し、
その応答に従い、ユーザ名 `bot1` として同チャンネルにメッセージを書き込む。

#### 構成

```
                Web service (port:10080)
    Computer    172.30.101.213
    |           |
   -o-----------o-----------o-
                            |
                            Mattermost
```

```bash
# WSL2
ipaddr=$(ip -j a | jq -r "map(select(.ifname==\"eth0\")) | .[].addr_info | map(select(.family==\"inet\")) | .[].local")
echo "$ipaddr"
port="10080"
url="http://${ipaddr}:${port}"
```

#### Mattermost 設定

* System Console
    * Environment
        * Developer
            * DeveloperSettings
                * Allow untrusted internal connections to: `172.30.101.213`
* Integrations
    * Outgoing Webhooks
        * Title: outgoing-webhook1
        * Description:
        * Content-Type: application/json
        * Channel: `channel1`
        * Trigger Words (One Per Line): `#bot1`
        * Callback URLs (One Per Line): `http://172.30.101.213:10080/callback`
        * Username: `bot1`

トークンが生成される。
このトークンを Web service 側で検証することで、どの Webhook かサービス側で特定できる。
今回は使わない。

#### Web service 設定

```console
$ ls
app.py  poetry.lock  pyproject.toml
```

```python
from flask import Flask, request


app = Flask(__name__)


@app.route('/callback', methods=['POST'])
def callback():
    print(request.json['user_name'])
    return '{"text": "hello"}'


if __name__ == '__main__':
    app.debug = True
    app.run(host='0.0.0.0', port=10080)
```

```console
$ cat pyproject.toml
[tool.poetry]
name = "mattermost-bot"
version = "0.1.0"
description = ""
authors = ["Your Name <you@example.com>"]

[tool.poetry.dependencies]
python = "^3.8"
Flask = "^2.2.1"
requests = "^2.28.1"

[tool.poetry.dev-dependencies]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
$
```

```console
$ python app.py
WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.
 * Serving Flask app 'app'
 * Debug mode: on
 * Running on all addresses (0.0.0.0)
   WARNING: This is a development server. Do not use it in a production deployment.
 * Running on http://127.0.0.1:10080
 * Running on http://172.30.101.213:10080 (Press CTRL+C to quit)
 * Restarting with stat
 * Debugger is active!
 * Debugger PIN: 130-808-904
```

## Slash commands

### Slash command を作り、コールバックを実装する。

チャンネル `channel1` に `/hello` を含むメッセージを書き込んだ時、
Mattermost が `http://172.30.101.213:20080/callback` に要求し、
その応答に従い、ユーザ名 `bot2` として同チャンネルの元投稿者にのみ見えるメッセージを書き込む。

#### 構成

```
                Web service (port:20080)
    Computer    172.30.101.213
    |           |
   -o-----------o-----------o-
                            |
                            Mattermost
```

```bash
# WSL2
ipaddr=$(ip -j a | jq -r "map(select(.ifname==\"eth0\")) | .[].addr_info | map(select(.family==\"inet\")) | .[].local")
echo "$ipaddr"
port="20080"
url="http://${ipaddr}:${port}"
```

#### Mattermost 設定

* System Console
    * Environment
        * Developer
            * DeveloperSettings
                * Allow untrusted internal connections to: `172.30.101.213`
* Integrations
    * Slash commands
        * Title: slash-command1
        * Description:
        * Command Trigger Word: `hello`
        * Request URL: `http://172.30.101.213:20080/callback`
        * Request Method: `POST`
        * Response Username: `bot2`
        * [ ] Autocomplete

トークンが生成される。
このトークンを Web service 側で検証することで、どの Slash command かサービス側で特定できる。
今回は使わない。

#### Web service 設定

```console
$ ls
app.py  poetry.lock  pyproject.toml
```

```python
$ cat app.py
from flask import Flask, request


app = Flask(__name__)


@app.route('/callback', methods=['POST', 'GET'])
def callback():
    print(request.form)
    return '{"text": "hello"}'


if __name__ == '__main__':
    app.debug = True
    app.run(host='0.0.0.0', port=20080)
```

```console
$ cat pyproject.toml
[tool.poetry]
name = "mattermost-slash-command"
version = "0.1.0"
description = ""
authors = ["Your Name <you@example.com>"]

[tool.poetry.dependencies]
python = "^3.8"
Flask = "^2.2.1"
requests = "^2.28.1"

[tool.poetry.dev-dependencies]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
$
```
