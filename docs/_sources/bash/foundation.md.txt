# bash基礎

https://www.gnu.org/software/bash/manual/bash.html

## バージョンがリリースされた日付、バージョンの変更内容

* [Is there a list of which features were added to specific releases (versions) of Bash?](https://mywiki.wooledge.org/BashFAQ/061)

## 複数行を含む変数を1行ずつ格納する。

```bash
text=$(
  cat <<__TEXT__
line 1
line 2
__TEXT__
)

# 空の出力の場合:
#text=$(
#  cat <<__TEXT__
#__TEXT__
#)

declare -a lines

if [ "$text" == "" ]; then
  lines=()
else
  mapfile -t lines <<<"$text"
fi

echo "len: ${#lines[@]}"
for line in "${lines[@]}"; do
  echo "line: $line"
done
```

```console
$ echo "len: ${#lines[@]}"
len: 2
$ for line in "${lines[@]}"; do
>   echo "line: $line"
> done
line: line 1
line: line 2
$
```

## 変数が定義済みか判定する。

```bash
unset var
[ "${var+x}" ] && echo true || echo false

var=
[ "${var+x}" ] && echo true || echo false

var="a"
[ "${var+x}" ] && echo true || echo false
```

```console
$ unset var
$ [ "${var+x}" ] && echo true || echo false
false
$ var=
$ [ "${var+x}" ] && echo true || echo false
true
$ var="a"
$ [ "${var+x}" ] && echo true || echo false
true
```

> ${parameter:+[word]}
> Use Alternative Value. If parameter is unset or null, null shall be substituted; otherwise, the expansion of word (or an empty string if word is omitted) shall be substituted.
> In the parameter expansions shown previously, use of the <colon> in the format shall result in a test for a parameter that is unset or null; omission of the <colon> shall result in a test for a parameter that is only unset.

https://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_06_02

## 変数が定義済み、かつ、値があるか判定する。

```bash
unset var
[ "${var:+x}" ] && echo true || echo false

var=
[ "${var:+x}" ] && echo true || echo false

var="a"
[ "${var:+x}" ] && echo true || echo false
```

```console
$ unset var
$ [ "${var:+x}" ] && echo true || echo false
false
$ var=
$ [ "${var:+x}" ] && echo true || echo false
false
$ var="a"
$ [ "${var:+x}" ] && echo true || echo false
true
```

>        ${parameter:+word}
>               Use Alternate Value.  If parameter is null or unset, nothing  is
>               substituted, otherwise the expansion of word is substituted.

## 連想配列を使う。

Bash version 4 以降では連想配列を利用できる。
他の言語でハッシュマップ、辞書などで呼ばれる変数を定義できる。

### 連想配列を定義する。

```bash
declare -A associative_array
```

### 連想配列の定義時に代入する。

```bash
declare -A associative_array=(
  ["key1"]="value1"
  ["key2"]="value2"
)
echo "key1: '${associative_array["key1"]}'"
```

```console
$ declare -A associative_array=(
>   ["key1"]="value1"
>   ["key2"]="value2"
> )
$ echo "key1: '${associative_array["key1"]}'"
key1: 'value1'
```

### 連想配列に値を入れる。

```bash
declare -A associative_array
associative_array["key1"]="value1"
echo "key1: '${associative_array["key1"]}'"

associative_array[key2]="value2"
echo "key2: '${associative_array["key2"]}'"

associative_array[ key3]="value3"
echo "key3: '${associative_array[key3]}'"
echo "key3: '${associative_array["key3"]}'"
echo "key3: '${associative_array[ key3]}'"
echo "key3: '${associative_array[" key3"]}'"
```

```console
$ declare -A associative_array
$ associative_array["key1"]="value1"
$ echo "key1: '${associative_array["key1"]}'"
key1: 'value1'
$ associative_array[key2]="value2"
$ echo "key2: '${associative_array["key2"]}'"
key2: 'value2'
$ associative_array[ key3]="value3"
$ echo "key3: '${associative_array[key3]}'"
key3: ''
$ echo "key3: '${associative_array["key3"]}'"
key3: ''
$ echo "key3: '${associative_array[ key3]}'"
key3: 'value3'
$ echo "key3: '${associative_array[" key3"]}'"
key3: 'value3'
```

連想配列のキーのダブルクォートを入れても動作する。

```bash
declare -A associative_array

associative_array[key1]="key1"
echo "key1: '${associative_array[key1]}'"

associative_array[key contains double quote \"]="value2"
echo "key2: '${associative_array[key contains double quote \"]}'"
echo "key2: '${associative_array["key contains double quote \""]}'"
```

```console
$ declare -A associative_array
$ associative_array[key1]="key1"
$ echo "key1: '${associative_array[key1]}'"
key1: 'key1'
$ echo "key2: '${associative_array["key contains double quote \""]}'"
key2: 'value2'
```

### 連想配列から値を得る。

```bash
declare -A associative_array
associative_array["key1"]="value1"
echo "key1: '${associative_array["key1"]}'"
```

```console
$ associative_array["key1"]="value1"
$ echo "key1: '${associative_array["key1"]}'"
key1: 'value1'
```

### 連想配列のすべてのキーを得る。

```bash
declare -A associative_array=(["key1"]="value1" ["key2"]="value2")
echo "${!associative_array[@]}"
associative_array["key3 containing spaces"]="value3"
for k in "${!associative_array[@]}"; do echo "k: '$k'"; done
```

```console
$ declare -A associative_array=(["key1"]="value1" ["key2"]="value2")
$ echo "${!associative_array[@]}"
key2 key1
$ associative_array["key3 containing spaces"]="value3"
$ for k in "${!associative_array[@]}"; do echo "k: '$k'"; done
k: 'key2'
k: 'key1'
k: 'key3 containing spaces'
```

### 連想配列から値を消す。

```bash
declare -A associative_array=(["key1"]="value1" ["key2"]="value2")
unset associative_array["key1"]
echo "${!associative_array[@]}"
```

```console
$ declare -A associative_array=(["key1"]="value1" ["key2"]="value2")
$ unset associative_array["key1"]
$ echo "${!associative_array[@]}"
key2
```

### 連想配列にキーが存在するか判定する。

```bash
declare -A associative_array=(["key1"]="value1" ["key2"]="")

key="key1"
if [ "${associative_array[$key]+x}" ]; then echo "The key '$key' exists."; else echo "The key '$key' does not exists."; fi

key=" key1"
if [ "${associative_array[$key]+x}" ]; then echo "The key '$key' exists."; else echo "The key '$key' does not exists."; fi

key="key2"
if [ "${associative_array[$key]+x}" ]; then echo "The key '$key' exists."; else echo "The key '$key' does not exists."; fi

key="key3"
if [ "${associative_array[$key]+x}" ]; then echo "The key '$key' exists."; else echo "The key '$key' does not exists."; fi
```

```console
$ declare -A associative_array=(["key1"]="value1" ["key2"]="")
$ key="key1"
$ if [ "${associative_array[$key]+x}" ]; then echo "The key '$key' exists."; else echo "The key '$key' does not exists."; fi
The key 'key1' exists.
```

```console
$ key=" key1"
$ if [ "${associative_array[$key]+x}" ]; then echo "The key '$key' exists."; else echo "The key '$key' does not exists."; fi
The key ' key1' does not exists.
```

```console
$ key="key2"
$ if [ "${associative_array[$key]+x}" ]; then echo "The key '$key' exists."; else echo "The key '$key' does not exists."; fi
The key 'key2' exists.
```

```console
$ key="key3"
$ if [ "${associative_array[$key]+x}" ]; then echo "The key '$key' exists."; else echo "The key '$key' does not exists."; fi
The key 'key3' does not exists.
```

### 連想配列のキーの数を得る。

```bash
declare -A associative_array=(["key1"]="value1" ["key2"]="value2")
echo "${#associative_array[@]}"
```

```console
$ declare -A associative_array=(["key1"]="value1" ["key2"]="value2")
$ echo "${#associative_array[@]}"
2
```

## ファンクションを使う。

### ファンクションを定義する。

```bash
f() {
  true
}
f
echo $?
```

```console
$ f() {
>   true
> }
$ f
$ echo $?
0
```

### ファンクションの一覧を得る。

```bash
declare -F
```

### 指定したファンクション定義を得る。

```bash
f() { echo a; }
declare -f f
```

```console
$ f() { echo a; }
$ declare -f f
f ()
{
    echo a
}
```

### すべてのファンクション定義を得る。

```bash
declare -f
```

### ファンクション実行後のステータスを制御する。

```bash
f() {
  return 1
}
f
echo $?
```

```console
$ f() {
>   return 1
> }
$ f
$ echo $?
1
```

## 文字列の末尾を除去する。

```bash
a="xyz1xyz"
echo "${a%%xyz}"
echo "$a"

b="xyz:xyz"
echo "${b%%:*}"

c="xyz:xyz xyz"
echo "${c%%:*}"
```

```console
$ a="xyz1xyz"
$ echo "${a%%xyz}"
xyz1
$ echo "$a"
xyz1xyz

$ b="xyz:xyz"
$ echo "${b%%:*}"
xyz

$ c="xyz:xyz xyz"
$ echo "${c%%:*}"
xyz
```

## 文字列を1箇所置換する。

```bash
a="xyz1xyz"
echo "${a/z/Z}"
echo "$a"
```

```console
$ a="xyz1xyz"
$ echo "${a/z/Z}"
xyZ1xyz
$ echo "$a"
xyz1xyz
```

## 文字列をすべて置換する。

```bash
a="xyz1xyz"
echo "${a//z/Z}"
echo "$a"
```

```console
$ a="xyz1xyz"
$ echo "${a//z/Z}"
xyZ1xyZ
$ echo "$a"
xyz1xyz
```

## 変数で bool 相当の表現を行う。

方法は複数あるが、次の記述が最もシンプルそう。

```bash
var='x'
[ "$var" ] && echo y || echo n
  # --> y

var=''
[ "$var" ] && echo y || echo n
  # --> n
```

[test - evaluate expression](https://pubs.opengroup.org/onlinepubs/9699919799/utilities/test.html):

> 1 argument:
> Exit true (0) if $1 is not null; otherwise, exit false.
