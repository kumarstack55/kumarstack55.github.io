# Python基礎

## Windows に複数のバージョンの Python をインストールする。

Chocolatey で `--sidebyside` オプションで同時に複数の Python を同居でインストールできる。

インストール可能なバージョンの一覧は次の URL で得られる。

https://community.chocolatey.org/packages/python#versionhistory

すでに Python 導入済みの環境で 3.8.10 を加えるなら次のようにする。

```powershell
# 管理者権限
choco install python3 --version=3.8.10 --sidebyside
```

インストール済みの Python は次のように一覧出力できる。

```console
PS > py --list
Installed Pythons found by C:\WINDOWS\py.exe Launcher for Windows
 -3.10-64 *
 -3.9-64
 -3.8-64
 -3.7-64
 -3.6-64
```

Python のバージョンは `py` でバージョン指定で切り替えできる。

```console
PS > py
Python 3.10.0 (tags/v3.10.0:b494f59, Oct  4 2021, 19:00:18) [MSC v.1929 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> exit()

PS > py -3.9
Python 3.9.4 (tags/v3.9.4:1f2e308, Apr  4 2021, 13:27:16) [MSC v.1928 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> exit()

PS > py -3.8
Python 3.8.10 (tags/v3.8.10:3d8993a, May  3 2021, 11:48:03) [MSC v.1928 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> exit()
```

## Debian 10 (buster) に Python 3.9.7 をインストールする。

```bash
sudo -i

apt update
apt install build-essential zlib1g-dev libssl-dev libffi-dev

cd /usr/local/src
curl -Lo Python-3.9.7.tar.xz https://www.python.org/ftp/python/3.9.7/Python-3.9.7.tar.xz
tar -Jxvf Python-3.9.7.tar.xz

cd /usr/local/src/Python-3.9.7
./configure --enable-optimizations --prefix=/usr/local/python-3.9.7
make
make altinstall
```

```bash
sudo update-alternatives --install /usr/local/bin/python3 python3 /usr/local/python-3.9.7/bin/python3.9 10
```

[Getting and installing the latest version of Python](https://docs.python.org/3.9/using/unix.html#on-linux)を参照した。

## ファイルを読む。

### open時に encoding を指定する。

入力データのエンコーディングを信じられるときに使える実装です。
バッファリングされるので、エンコーディングに失敗したとき、どの行で失敗したのかを特定するのはほぼ不可能となります。

```python
with open('a.txt', 'w', encoding='utf-8') as f1:
    f1.write("line1\n")
    f1.write("line2\n")
    f1.write("line3\n")

with open('a.txt', encoding='utf-8') as f2:
    lineno = 1
    for line1 in f2:
        line2 = line1.rstrip()
        print('{0}: {1}'.format(lineno, line2))
        lineno += 1
```

```console
>>> with open('a.txt', encoding='utf-8') as f2:
...     lineno = 1
...     for line1 in f2:
...         line2 = line1.rstrip()
...         print('{0}: {1}'.format(lineno, line2))
...         lineno += 1
...
1: line1
2: line2
3: line3
```

### open時に bytes として読む。

```python
import codecs
with open('a.txt', 'rb') as f3:
    lineno = 1
    for bytes_line in f3:
        line1 = codecs.decode(bytes_line, encoding='utf-8', errors='strict')
        line2 = line1.rstrip()
        print('{0}: {1}'.format(lineno, line2))
        lineno += 1
```

```console
>>> with open('a.txt', 'rb') as f3:
...     lineno = 1
...     for bytes_line in f3:
...         line1 = codecs.decode(bytes_line, encoding='utf-8', errors='strict')
...         line2 = line1.rstrip()
...         print('{0}: {1}'.format(lineno, line2))
...         lineno += 1
...
1: line1
2: line2
3: line3
```

### 読む行数を指定する。

## ビット演算を行う。

```python
x = 0b1010
y = 0b1100
print('x      = {:08b}'.format(x))
print('y      = {:08b}'.format(y))
print('x << 1 = {:08b}'.format(x << 1)) # bit shift
print('x >> 1 = {:08b}'.format(x >> 1)) # bit shift
print('x & y  = {:08b}'.format(x & y))  # AND
print('x | y  = {:08b}'.format(x | y))  # OR
print('x ^ y  = {:08b}'.format(x ^ y))  # XOR
```

```console
>>> x = 0b1010
>>> y = 0b1100
>>> print('x      = {:08b}'.format(x))
x      = 00001010
>>> print('y      = {:08b}'.format(y))
y      = 00001100
>>> print('x << 1 = {:08b}'.format(x << 1)) # bit shift
x << 1 = 00010100
>>> print('x >> 1 = {:08b}'.format(x >> 1)) # bit shift
x >> 1 = 00000101
>>> print('x & y  = {:08b}'.format(x & y))  # AND
x & y  = 00001000
>>> print('x | y  = {:08b}'.format(x | y))  # OR
x | y  = 00001110
>>> print('x ^ y  = {:08b}'.format(x ^ y))  # XOR
x ^ y  = 00000110
```

## クラス名を得る。

`__class__.__name__` で得ることができるが、継承時の動作は直観的ではない部分があるので注意です。

```python
class A(object):
    def f1(self):
        return self.__class__.__name__
    def f2(self):
        return self.__class__.__name__

class B(A):
    def f2(self):
        return self.__class__.__name__

class C(A):
    def f2(self):
        return super().f2()

a = A()
print(a.f1())
print(a.f2())

b = B()
print(b.f1())
print(b.f2())

c = C()
print(c.f2())
```

```python
>>> a = A()
>>> print(a.f1())
A
>>> print(a.f2())
A
>>> b = B()
>>> print(b.f1())
B
>>> print(b.f2())
B
>>> c = C()
>>> print(c.f2())
C
```

## クラスにオブジェクトの文字列表現を定義する。

```python
class A(object):
    def __init__(self, n):
        self._n = n

a1 = A(10)
str(a1)
a1.__repr__()

class B(object):
    def __init__(self, n):
        self._n = n
    def __repr__(self):
        return '<{0} n:{1}>'.format(self.__class__.__name__, self._n)

b1 = B(10)
str(b1)
b1.__repr__()
```

```python
>>> class A(object):
...     def __init__(self, n):
...         self._n = n
...
>>> a1 = A(10)
>>> str(a1)
'<__main__.A object at 0x0000021607DBDE10>'
>>> a1.__repr__()
'<__main__.A object at 0x0000021607DBDE10>'
```

```python
>>> class B(object):
...     def __init__(self, n):
...         self._n = n
...     def __repr__(self):
...         return '<{0} n:{1}>'.format(self.__class__.__name__, self._n)
...
>>> b1 = B(10)
>>> str(b1)
'<B n:10>'
>>> b1.__repr__()
'<B n:10>'
```

https://docs.python.org/3/reference/datamodel.html#object.__repr__

## クラスに印字可能な文字列表現を定義する。

```python
class A(object):
    def __init__(self, n):
        self._n = n

a1 = A(10)
str(a1)
a1.__repr__()

class B(object):
    def __init__(self, n):
        self._n = n
    def __str__(self):
        return str(self._n)

b1 = B(10)
str(b1)
b1.__repr__()
```

```python
>>> class A(object):
...     def __init__(self, n):
...         self._n = n
...
>>> a1 = A(10)
>>> str(a1)
'<__main__.A object at 0x0000021607DBE350>'
>>> a1.__repr__()
'<__main__.A object at 0x0000021607DBE350>'
```

```python
>>> class B(object):
...     def __init__(self, n):
...         self._n = n
...     def __str__(self):
...         return str(self._n)
...
>>> b1 = B(10)
>>> str(b1)
'10'
>>> b1.__repr__()
'<__main__.B object at 0x0000021607DBE3E0>'
```

https://docs.python.org/3/reference/datamodel.html#object.__str__

## クラスに同値性を定義する。

`__eq__` で同値性を定義できる。

ただし、 `__eq__` を定義すると `__hash__` は `None` となり、 `dict` に格納できなくなる。

`dict` に格納したいなら `__hash__` を定義する。

`__hash__` の実装は [ドキュメントの hash() を参考](https://docs.python.org/3/reference/datamodel.html#object.__hash__)に作るとよい。

以下は、クラスA が `__eq__` を実装しないクラス、クラスB が `__eq__` を実装した結果 `dict` に格納できなくなったクラス、クラスC が `__eq__` と `__hash__` を実装したクラスである。


```python
PS > py
Python 3.10.0 (tags/v3.10.0:b494f59, Oct  4 2021, 19:00:18) [MSC v.1929 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> class A(object):
...     def __init__(self, n: int):
...         self._n = n
...     @property
...     def value(self):
...         return self._n
...
>>> a1 = A(10)
>>> a2 = A(10)
>>> a1 == a2
False
>>> class B(object):
...     def __init__(self, n: int):
...         self._n = n
...     @property
...     def value(self):
...         return self._n
...     def __eq__(self, other):
...         return self.value == other.value
...
>>> b1 = B(10)
>>> b2 = B(10)
>>> b1 == b2
True
>>> b3 = B(20)
>>> b1 == b3
False
>>> a1.__hash__ is None
False
>>> b1.__hash__ is None
True
>>> class C(object):
...     def __init__(self, n: int):
...         self._n = n
...     @property
...     def value(self):
...         return self._n
...     def __eq__(self, other):
...         return self.value == other.value
...     def __hash__(self):
...         return hash((self._n,))
...
>>> c1 = C(10)
>>> c2 = C(10)
>>> c1 == c2
True
>>> c3 = C(20)
>>> c1 == c3
False
>>> a1.__hash__ is None
False
>>> b1.__hash__ is None
True
>>> c1.__hash__ is None
False
>>> dic = dict()
>>> dic[a1] = 1
>>> dic[a2] = 1
>>> dic[b1] = 1
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: unhashable type: 'B'
>>> dic[c1] = 1
>>> dic[c2] = 1
>>> dic
{<__main__.A object at 0x0000021607DBE0B0>: 1, <__main__.A object at 0x0000021607DBE1D0>: 1, <__main__.C object at 0x0000021607DBE890>: 1}
```

* `__eq__` も `__hash__` もない `A` は
    * `==` で比較を試みたとき、オブジェクトごとに異なるものとして扱われる。
    * `dict` に入れるとき、オブジェクトごとにキーが作られる。
* `__eq__` があり `__hash__` がない `B` は
    * `==` で比較を試みたとき、メンバの値をもとに比較できる。
    * `dict` に格納できない。
* `__eq__` と `__hash__` がある `C` は `dict` に格納できる。
    * `==` で比較を試みたとき、メンバの値をもとに比較できる。
    * `dict` に格納できる。

## キャッチした例外のスタックトレースを出力する。

```python
import traceback

class AppError(Exception):
    pass

class CustomError(AppError):
    pass

def f1():
    raise CustomError('msg')

def f2():
    f1()

def main():
    try:
        f2()
    except AppError as e:
        print(traceback.format_exc())

main()
```

```python
>>> main()
Traceback (most recent call last):
  File "<stdin>", line 3, in main
  File "<stdin>", line 2, in f2
  File "<stdin>", line 2, in f1
CustomError: msg
```

## キャッチした例外を再発生させる。

```python
class AppError(Exception):
    pass


class CustomError(AppError):
    pass


def f1():
    raise CustomError('msg')


def main():
    try:
        print('begin try')
        f1()
        print('end try')
    except AppError as e:
        print('begin except')
        raise e
        print('end except')


if __name__ == '__main__':
    main()
```

```python
PS > python .\a.py
begin try
begin except
Traceback (most recent call last):
  File ".\a.py", line 25, in <module>
    main()
  File ".\a.py", line 20, in main
    raise e
  File ".\a.py", line 16, in main
    f1()
  File ".\a.py", line 10, in f1
    raise CustomError('msg')
__main__.CustomError: msg
```

## 複数の変数を入れ替える。

`a, b = b, a` で入れ替えできる。

```console
>>> a = {'a':True}
>>> b = {'b':True}
>>> a
{'a': True}
>>> b
{'b': True}
>>> a, b = b, a
>>> a
{'b': True}
>>> b
{'a': True}
```

## ファンクションに定義されていない引数を与える。

```python
def f(arg1):
    pass


f(arg1=1, arg2=2)
```

```console
>>> f(arg1=1, arg2=2)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: f() got an unexpected keyword argument 'arg2'
```

## ファンクションに同一の引数を複数回指定する。

```python
def f(arg1):
    print(kwargs)


f(arg1=1, arg1=2)
```

```console
>>> f(arg1=1, arg1=2)
  File "<stdin>", line 1
SyntaxError: keyword argument repeated: arg1
```

## ファンクションにディクショナリで引数を指定する。

```python
def f(arg1):
    print(arg1)


kwargs = {'arg1': 1}
f(**kwargs)
```

```console
>>> f(**kwargs)
1
```
## ファンクションで任意長の引数を受ける。

```python
def f(arg1, **kwargs):
    print(kwargs)


f(arg1=1, arg2=2)
f(arg1=1, **{"arg2": 2})
f(arg1=1, **{"arg2": 2, "arg1": 3})
```

```console
>>> f(arg1=1, arg2=2)
{'arg2': 2}
>>> f(arg1=1, **{"arg2": 2})
{'arg2': 2}
>>> f(arg1=1, **{"arg2": 2, "arg1": 3})
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: __main__.f() got multiple values for keyword argument 'arg1'
```

## utf-8 でエンコードされたとき何バイトかを得る。

```python
len('あ'.encode('utf-8'))
```

```console
>>> len('あ'.encode('utf-8'))
3
```

## Unicode のコードポイントを得る。

```python
def get_fileformat_info_url(cp: int):
    return 'https://www.fileformat.info/info/unicode/char/{:x}/index.htm'.format(cp)


string = 'あ'
#string = '禰󠄀'

for ch in list(string):
    cp = ord(ch)
    print('U+{:x}'.format(cp))
    print(get_fileformat_info_url(cp))
```

```console
>>> string = 'あ'
>>> for ch in list(string):
...     cp = ord(ch)
...     print('U+{:x}'.format(cp))
...     print(get_fileformat_info_url(cp))
...
U+3042
https://www.fileformat.info/info/unicode/char/3042/index.htm
```

https://docs.python.org/3/library/functions.html#ord
