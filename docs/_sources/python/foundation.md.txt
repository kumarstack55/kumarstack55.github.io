# Python基礎

## Windows に複数のバージョンの Python をインストールする。

Chocolatey で `--sidebyside` オプションで同時に複数の Python を同居でインストールできる。

インストール可能なバージョンの一覧は次の URL で得られる。

https://community.chocolatey.org/packages/python#versionhistory

すでに Python 導入済みの環境で 3.8.10 を加えるなら次のようにする。

```powershell
# 管理者権限
choco install python3 --version=3.8.10 --sidebyside
```

インストール済みの Python は次のように一覧出力できる。

```console
PS > py --list
Installed Pythons found by C:\WINDOWS\py.exe Launcher for Windows
 -3.10-64 *
 -3.9-64
 -3.8-64
 -3.7-64
 -3.6-64
```

Python のバージョンは `py` でバージョン指定で切り替えできる。

```console
PS > py
Python 3.10.0 (tags/v3.10.0:b494f59, Oct  4 2021, 19:00:18) [MSC v.1929 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> exit()

PS > py -3.9
Python 3.9.4 (tags/v3.9.4:1f2e308, Apr  4 2021, 13:27:16) [MSC v.1928 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> exit()

PS > py -3.8
Python 3.8.10 (tags/v3.8.10:3d8993a, May  3 2021, 11:48:03) [MSC v.1928 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> exit()
```

## Debian 10 (buster) に Python 3.9.7 をインストールする。

```bash
sudo -i

apt update
apt install build-essential zlib1g-dev libssl-dev libffi-dev

cd /usr/local/src
curl -Lo Python-3.9.7.tar.xz https://www.python.org/ftp/python/3.9.7/Python-3.9.7.tar.xz
tar -Jxvf Python-3.9.7.tar.xz

cd /usr/local/src/Python-3.9.7
./configure --enable-optimizations --prefix=/usr/local/python-3.9.7
make
make altinstall
```

```bash
sudo update-alternatives --install /usr/local/bin/python3 python3 /usr/local/python-3.9.7/bin/python3.9 10
```

[Getting and installing the latest version of Python](https://docs.python.org/3.9/using/unix.html#on-linux)を参照した。

## ビット演算を行う。

```python
x = 0b1010
y = 0b1100
print('x      = {:08b}'.format(x))
print('y      = {:08b}'.format(y))
print('x << 1 = {:08b}'.format(x << 1)) # bit shift
print('x >> 1 = {:08b}'.format(x >> 1)) # bit shift
print('x & y  = {:08b}'.format(x & y))  # AND
print('x | y  = {:08b}'.format(x | y))  # OR
print('x ^ y  = {:08b}'.format(x ^ y))  # XOR
```

```console
>>> x = 0b1010
>>> y = 0b1100
>>> print('x      = {:08b}'.format(x))
x      = 00001010
>>> print('y      = {:08b}'.format(y))
y      = 00001100
>>> print('x << 1 = {:08b}'.format(x << 1)) # bit shift
x << 1 = 00010100
>>> print('x >> 1 = {:08b}'.format(x >> 1)) # bit shift
x >> 1 = 00000101
>>> print('x & y  = {:08b}'.format(x & y))  # AND
x & y  = 00001000
>>> print('x | y  = {:08b}'.format(x | y))  # OR
x | y  = 00001110
>>> print('x ^ y  = {:08b}'.format(x ^ y))  # XOR
x ^ y  = 00000110
```

## 複数の変数を入れ替える。

`a, b = b, a` で入れ替えできる。

```console
>>> a = {'a':True}
>>> b = {'b':True}
>>> a
{'a': True}
>>> b
{'b': True}
>>> a, b = b, a
>>> a
{'b': True}
>>> b
{'a': True}
```

## ファンクションに定義されていない引数を与える。

```python
def f(arg1):
    pass


f(arg1=1, arg2=2)
```

```console
>>> f(arg1=1, arg2=2)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: f() got an unexpected keyword argument 'arg2'
```

## ファンクションに同一の引数を複数回指定する。

```python
def f(arg1):
    print(kwargs)


f(arg1=1, arg1=2)
```

```console
>>> f(arg1=1, arg1=2)
  File "<stdin>", line 1
SyntaxError: keyword argument repeated: arg1
```

## ファンクションにディクショナリで引数を指定する。

```python
def f(arg1):
    print(arg1)


kwargs = {'arg1': 1}
f(**kwargs)
```

```console
>>> f(**kwargs)
1
```
## ファンクションで任意長の引数を受ける。

```python
def f(arg1, **kwargs):
    print(kwargs)


f(arg1=1, arg2=2)
f(arg1=1, **{"arg2": 2})
f(arg1=1, **{"arg2": 2, "arg1": 3})
```

```console
>>> f(arg1=1, arg2=2)
{'arg2': 2}
>>> f(arg1=1, **{"arg2": 2})
{'arg2': 2}
>>> f(arg1=1, **{"arg2": 2, "arg1": 3})
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: __main__.f() got multiple values for keyword argument 'arg1'
```

## utf-8 でエンコードされたとき何バイトかを得る。

```python
len('あ'.encode('utf-8'))
```

```console
>>> len('あ'.encode('utf-8'))
3
```

## Unicode のコードポイントを得る。

```python
def get_fileformat_info_url(cp: int):
    return 'https://www.fileformat.info/info/unicode/char/{:x}/index.htm'.format(cp)


string = 'あ'
#string = '禰󠄀'

for ch in list(string):
    cp = ord(ch)
    print('U+{:x}'.format(cp))
    print(get_fileformat_info_url(cp))
```

```console
>>> string = 'あ'
>>> for ch in list(string):
...     cp = ord(ch)
...     print('U+{:x}'.format(cp))
...     print(get_fileformat_info_url(cp))
...
U+3042
https://www.fileformat.info/info/unicode/char/3042/index.htm
```

https://docs.python.org/3/library/functions.html#ord
