# Python3 の標準ライブラリ

## argparse でファイルのエンコーディングを指定する。

指定なしの場合、環境によっては cp932 が選択されることがある。
対象のエンコーディングがわかっていれば、明示的に指定したほうがよい。

```python
import argparse

parser = argparse.ArgumentParser()
parser.add_argument('--f1', type=argparse.FileType('w'))
parser.add_argument('--f2', type=argparse.FileType('w', encoding='UTF-8'))
parser.add_argument('--f3', type=argparse.FileType('r'))
parser.add_argument('--f4', type=argparse.FileType('r', encoding='UTF-8'))
args1 = ['--f1', '1.txt', '--f2', '2.txt', '--f3', '3.txt', '--f4', '4.txt']
args2 = parser.parse_args(args1)

args2.f1
args2.f2
args2.f3
args2.f4
```

```console
PS > (Get-WmiObject Win32_OperatingSystem).Version
10.0.22000
```

```console
PS > python --version
Python 3.9.4
```

```console
>>> args2.f1
<_io.TextIOWrapper name='1.txt' mode='w' encoding='cp932'>
>>> args2.f2
<_io.TextIOWrapper name='2.txt' mode='w' encoding='UTF-8'>
>>> args2.f3
<_io.TextIOWrapper name='3.txt' mode='r' encoding='cp932'>
>>> args2.f4
<_io.TextIOWrapper name='4.txt' mode='r' encoding='UTF-8'>
```

## logging でロガーを利用する。

```python
import logging


# ルートロガーの設定は、すべてのロガーに影響するので利用を回避する。
# 回避するために、ルートロガーではないロガーを得る。
# 一般的に、モジュール名をロガー名に使う。
logger = logging.getLogger(__name__)

# レベルは、ロガーとハンドラーの両方で設定する。
logger.setLevel(logging.DEBUG)
handler = logging.StreamHandler()
handler.setLevel(logging.DEBUG)
formatter = logging.Formatter('%(asctime)s %(name)s %(levelname)s %(message)s')
handler.setFormatter(formatter)
logger.addHandler(handler)
```

## functools で既存関数の一部の変数を指定した関数相当を作る。

```python
#!/usr/bin/env python3
from functools import partial
import sys


debug_print = partial(print, file=sys.stderr)
print("stdout")
debug_print("stderr")
```

```bash
./a.py
./a.py >/dev/null
```

```console
$ ./a.py
stdout
stderr
```

```console
$ ./a.py >/dev/null
stderr
```
