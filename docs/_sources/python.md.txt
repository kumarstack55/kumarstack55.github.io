# Python

## Debian 10 (buster) に Python 3.9.7 をインストールする。

```bash
sudo -i

apt update
apt install build-essential zlib1g-dev libssl-dev libffi-dev

cd /usr/local/src
curl -Lo Python-3.9.7.tar.xz https://www.python.org/ftp/python/3.9.7/Python-3.9.7.tar.xz
tar -Jxvf Python-3.9.7.tar.xz

cd /usr/local/src/Python-3.9.7
./configure --enable-optimizations --prefix=/usr/local/python-3.9.7
make
make altinstall
```

```bash
sudo update-alternatives --install /usr/local/bin/python3 python3 /usr/local/python-3.9.7/bin/python3.9 10
```

[Getting and installing the latest version of Python](https://docs.python.org/3.9/using/unix.html#on-linux)を参照した。

## ビット演算を行う。

```python
x = 0b1010
y = 0b1100
print('x      = {:08b}'.format(x))
print('y      = {:08b}'.format(y))
print('x << 1 = {:08b}'.format(x << 1)) # bit shift
print('x >> 1 = {:08b}'.format(x >> 1)) # bit shift
print('x & y  = {:08b}'.format(x & y))  # AND
print('x | y  = {:08b}'.format(x | y))  # OR
print('x ^ y  = {:08b}'.format(x ^ y))  # XOR
```

```console
>>> x = 0b1010
>>> y = 0b1100
>>> print('x      = {:08b}'.format(x))
x      = 00001010
>>> print('y      = {:08b}'.format(y))
y      = 00001100
>>> print('x << 1 = {:08b}'.format(x << 1)) # bit shift
x << 1 = 00010100
>>> print('x >> 1 = {:08b}'.format(x >> 1)) # bit shift
x >> 1 = 00000101
>>> print('x & y  = {:08b}'.format(x & y))  # AND
x & y  = 00001000
>>> print('x | y  = {:08b}'.format(x | y))  # OR
x | y  = 00001110
>>> print('x ^ y  = {:08b}'.format(x ^ y))  # XOR
x ^ y  = 00000110
```

## ファンクションに定義されていない引数を与える。

```python
def f(arg1):
    pass


f(arg1=1, arg2=2)
```

```console
>>> f(arg1=1, arg2=2)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: f() got an unexpected keyword argument 'arg2'
```

## ファンクションに同一の引数を複数回指定する。

```python
def f(arg1):
    print(kwargs)


f(arg1=1, arg1=2)
```

```console
>>> f(arg1=1, arg1=2)
  File "<stdin>", line 1
SyntaxError: keyword argument repeated: arg1
```

## ファンクションにディクショナリで引数を指定する。

```python
def f(arg1):
    print(arg1)


kwargs = {'arg1': 1}
f(**kwargs)
```

```console
>>> f(**kwargs)
1
```
## ファンクションで任意長の引数を受ける。

```python
def f(arg1, **kwargs):
    print(kwargs)


f(arg1=1, arg2=2)
f(arg1=1, **{"arg2": 2})
f(arg1=1, **{"arg2": 2, "arg1": 3})
```

```console
>>> f(arg1=1, arg2=2)
{'arg2': 2}
>>> f(arg1=1, **{"arg2": 2})
{'arg2': 2}
>>> f(arg1=1, **{"arg2": 2, "arg1": 3})
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: __main__.f() got multiple values for keyword argument 'arg1'
```

## utf-8 でエンコードされたとき何バイトかを得る。

```python
len('あ'.encode('utf-8'))
```

```console
>>> len('あ'.encode('utf-8'))
3
```

## Unicode のコードポイントを得る。

```python
def get_fileformat_info_url(cp: int):
    return 'https://www.fileformat.info/info/unicode/char/{:x}/index.htm'.format(cp)


string = 'あ'
#string = '禰󠄀'

for ch in list(string):
    cp = ord(ch)
    print('U+{:x}'.format(cp))
    print(get_fileformat_info_url(cp))
```

```console
>>> string = 'あ'
>>> for ch in list(string):
...     cp = ord(ch)
...     print('U+{:x}'.format(cp))
...     print(get_fileformat_info_url(cp))
...
U+3042
https://www.fileformat.info/info/unicode/char/3042/index.htm
```

https://docs.python.org/3/library/functions.html#ord

## ロガーを利用する。

```python
import logging


# ルートロガーの設定は、すべてのロガーに影響するので利用を回避する。
# 回避するために、ルートロガーではないロガーを得る。
# 一般的に、モジュール名をロガー名に使う。
logger = logging.getLogger(__name__)

# レベルは、ロガーとハンドラーの両方で設定する。
logger.setLevel(logging.DEBUG)
handler = logging.StreamHandler()
handler.setLevel(logging.DEBUG)
formatter = logging.Formatter('%(asctime)s %(name)s %(levelname)s %(message)s')
handler.setFormatter(formatter)
logger.addHandler(handler)
```

## IPアドレスを計算する。

```bash
cat <<__PYTHON__ | tee /tmp/ipv4_calc.py
#!/usr/bin/env python3
from ipaddress import IPv4Interface
import argparse
import json


def to_bin(network):
    packed = network.packed
    return '.'.join(map(lambda o: '{:08b}'.format(o), map(int, packed)))


def print_key_value(key, value):
    print('%-18s: %s' % (key, value))


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument(
            'ipaddr_prefix', nargs=1,
            help='x.x.x.x/xx')
    args = parser.parse_args()
    interface = IPv4Interface(args.ipaddr_prefix[0])

    print_key_value('address', interface.ip)
    print_key_value('network', interface.network.network_address)
    print_key_value('netmask', interface.network.netmask)
    print_key_value('broadcast', interface.network.broadcast_address)

    print_key_value('addressPrefix', interface.network.prefixlen)
    print_key_value('numAddresses', interface.network.num_addresses)

    if interface.network.prefixlen < 32:
        numHostAddresses = interface.network.num_addresses - 2
    else:
        numHostAddresses = 1
    print_key_value('numHostAddresses', numHostAddresses)

    print_key_value('address', to_bin(interface.ip))
    print_key_value('network', to_bin(interface.network.network_address))
    print_key_value('netmask', to_bin(interface.network.netmask))
    print_key_value('broadcast', to_bin(interface.network.broadcast_address))
__PYTHON__
chmod +x /tmp/ipv4_calc.py
./ipv4_calc.py 172.17.103.28/20
```

```console
$ ./ipv4_calc.py 172.17.103.28/20
address           : 172.17.103.28
network           : 172.17.96.0
netmask           : 255.255.240.0
broadcast         : 172.17.111.255
addressPrefix     : 20
numAddresses      : 4096
numHostAddresses  : 4094
address           : 10101100.00010001.01100111.00011100
network           : 10101100.00010001.01100000.00000000
netmask           : 11111111.11111111.11110000.00000000
broadcast         : 10101100.00010001.01101111.11111111
```
