# Excel

Excel を PowerShell で操作する。

## Excel プロセスが存在すれば、終了する。

```powershell
Get-Process |
    Where-Object { $_.Name -eq 'EXCEL' } |
    Stop-Process
```

## アプリケーションを起動する。

```powershell
$Application = New-Object -ComObject Excel.Application
$Application.Visible = $true
```

## アプリケーションを終了する。

```powershell
$Application.Quit()
```

## アプリケーションに新しいブックを加える。

```powershell
$Book = $Application.Workbooks.Add()
```

## アプリケーションにブックを開く。

```powershell
$UserProfile = [Environment+SpecialFolder]::UserProfile
$UserProfilePath = [Environment]::GetFolderPath($UserProfile)
$DownloadPath = Join-Path $UserProfilePath "Downloads"
$BookFileName = Join-Path $DownloadPath "Book.xlsx"

# ファイルを開いてブックを得る。。
$Book = $Application.Workbooks.Open($BookFileName)
```

## ブックを保存する。

```powershell
$UserProfile = [Environment+SpecialFolder]::UserProfile
$UserProfilePath = [Environment]::GetFolderPath($UserProfile)
$DownloadPath = Join-Path $UserProfilePath "Downloads"
$BookFileName = Join-Path $DownloadPath "Book.xlsx"

# ファイルがあったとき上書き保存できるよう、アラートを表示しない。
$OldDisplayAlerts = $Application.DisplayAlerts
$Application.DisplayAlerts = $false

# 保存する。
$Book.SaveAs($BookFileName)

# 設定を戻す。
$Application.DisplayAlerts = $OldDisplayAlerts
```

## ブックを終了する。

```powershell
$Book.Close()
```

## ブックにシートを追加する。

```powershell
$Sheets = $Book.Sheets
$Sheet = $Sheets.Add()
```

## シートの名前を設定する。

```powershell
$Sheet.Name = "Sheet3"
```

## ブックからシートを得る。

```powershell
$Sheets = $Book.Sheets
$SheetName = "Sheet1"
$Sheet = $Sheets[$SheetName]
```

## ブックからシートを選択する。

```powershell
$Sheet.Select()
```

## シート内の範囲を得る。

### セルを選択する。

```powershell
$Range = $Sheet.Range("A1")
```

### 範囲を選択する。

```powershell
$Range = $Sheet.Range("B2:D5")
```

## シート内の範囲を選択する。

```powershell
$Range.Select()
```

## シート内の範囲に値を設定する。

```powershell
$Address = "B2:D5"
$Range = $Sheet.Range($Address)

$Rows, $Columns = $Range.Rows, $Range.Columns
for ($RowIndex = 1; $RowIndex -le $Rows.Count; $RowIndex += 1) {
    for ($ColumnIndex = 1; $ColumnIndex -le $Columns.Count; $ColumnIndex += 1) {
        $Range[$RowIndex, $ColumnIndex].Value2 = $RowIndex * 100 + $ColumnIndex
    }
}
```

## シートにまとめて値を設定する。

```powershell
$Address = "B2:D5"
$Range = $Sheet.Range($Address)

# ランク
$TableArrayRank = 2

# 要素数
$LengthArray = [System.Array]::CreateInstance([int], $TableArrayRank)
$LengthArray[0] = $Range.Rows.Count
$LengthArray[1] = $Range.Columns.Count

# 下限
$LowerBoundArray = [System.Array]::CreateInstance([int], $TableArrayRank)
$LowerBoundArray[0] = 1
$LowerBoundArray[1] = 1

$TableArray = [System.Array]::CreateInstance([int], $LengthArray, $LowerBoundArray)

$Rows, $Columns = $Range.Rows, $Range.Columns
for ($RowIndex = 1; $RowIndex -le $Rows.Count; $RowIndex += 1) {
    for ($ColumnIndex = 1; $ColumnIndex -le $Columns.Count; $ColumnIndex += 1) {
        $TableArray[$RowIndex, $ColumnIndex] = $RowIndex * 100 + $ColumnIndex
    }
}

$TableArray[1, 1]
    # --> 101

$Range.Value2 = $TableArray
```

## シートからまとめて値を得る。

```powershell
$Address = "B2:D5"
$Range = $Sheet.Range($Address)
$TableArray = $Range.Value2

$TableArray.GetLowerBound(0), $TableArray.GetUpperBound(0)
    # --> 1, 4
$TableArray.GetLowerBound(1), $TableArray.GetUpperBound(1)
    # --> 1, 3

$TableArray[1, 1]
    # --> 101

$TableArray
```

## ComObject を解放する。

以下は `$Application` についての例だが、すべての ComObject について、実施する。

```powershell
[System.Runtime.Interopservices.Marshal]::ReleaseComObject($Application) |
    Out-Null
```

あるいは、PowerShell のプロセスを終了すれば、解放されるかもしれない。

* [PowerTip: Release COM Object in PowerShell](https://devblogs.microsoft.com/scripting/powertip-release-com-object-in-powershell/)
* [.NETを使った別プロセスのOfficeの自動化が面倒なはずがない―そう考えていた時期が俺にもありました。](https://qiita.com/mima_ita/items/aa811423d8c4410eca71)
